[
["index.html", "Un Primer Curso de R Portada", " Un Primer Curso de R Alberto Rodríguez Rodríguez Última actualización: 22 de julio de 2020 Portada "],
["Presenta.html", "Presentación", " Presentación Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum "],
["intro.html", "Introducción", " Introducción "],
["1-Fund.html", "Capítulo 1 Fundamentos del lenguaje R", " Capítulo 1 Fundamentos del lenguaje R "],
["1-1-introducción-a-r.html", "1.1 Introducción a R", " 1.1 Introducción a R Importancia del case sensitive en R (mayúsculas vs minúsculas) Operador de asignación = vs &lt;- vs -&gt; 1.1.1 Tipos de datos en R En R existen 5 tipos de datos básicos Lógicos Enteros Numéricos/reales Cadena o caracter Complejos 1.1.2 Operaciones aritméticas y variables en R 1.1.3 Expresiones lógicas en R "],
["1-2-estructuras-de-datos.html", "1.2 Estructuras de datos", " 1.2 Estructuras de datos Principales estructuras de datos en R. Extraída de https://medium.com/@tiwarigaurav2512/r-data-types-847fffb01d5b 1.2.1 Vectores Importancia de la función c() Representación gráfica de un vector vector1 &lt;- 1 vector2 &lt;- c(1) # vector3 &lt;- 1, 2 vector4 &lt;- 1:2 vector5 &lt;- c(1,2) Mi primer vector. # Mi primer vector con 5 elementos c(1, 2, 3, 4, 5) ## [1] 1 2 3 4 5 # Matriz con tres filas y cuatro columnas matrix(1:12, nrow = 3, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 1.2.1.1 Tipos de vectores Lógicos # Mi primer vector Lógico c(TRUE, FALSE, FALSE, TRUE) Enteros # Mi primer vector entero c(12L, 3L, 24L, 8L) Reales # Mi primer vector real c(12.10, 24.90, 4.99) Cadena # Mi primer vector cadena c(&quot;Lunes&quot;, &quot;Martes&quot;, &quot;Miércoles&quot;,&quot;Jueves&quot;, &quot;Viernes&quot;, &quot;Sábado&quot;,&quot;Domingo&quot;) 1.2.1.2 Cómo crear vectores rápidamente Funciones (seq() y rep()) 1.2.1.3 Indexación de vectores Fuente: Manual R Base Indexación Cómo extraer elementos de un vector - R es un lenguaje de programación indexado en 1; es decir, al primer elemento de un vector se le asigna la posición 1. Para extraer elementos de un vector usamos corchetes [] Gráfico de indexación de vectores 1.2.1.3.1 Por posición Nombre_vector[3] Nombre_vector[c(3)] Nombre_vector[1:4] Nombre_vector[c(1:4)] Nombre_vector[c(1,3,7)] Nombre_vector[-c(1,3,7)] 1.2.1.3.2 Por vectores lógicos Nombre_vector[c(LOGICO)] 1.2.1.4 Modificar, anexar, remover elementos de un vector Modificar elementos de un vector vector &lt;- c(1L:5L) vector[5] &lt;- 6L vector ## [1] 1 2 3 4 6 vector1 &lt;- c(1L:5L) vector1[c(3:5)] &lt;- 6L vector1 ## [1] 1 2 6 6 6 vector2 &lt;- c(1L:5L) vector2[c(TRUE, FALSE, FALSE, FALSE, TRUE)] &lt;- 6L vector2 ## [1] 6 2 3 4 6 Adicionar elementos a un vector vector1 &lt;- c(1:3) vector2 &lt;- c(4:5) # nuevo vector vector3_1 &lt;- c(vector1, vector2) vector3_1 ## [1] 1 2 3 4 5 # mismo vector vector1[c(4:5)] &lt;- c(4:5) vector1 ## [1] 1 2 3 4 5 Remover elementos de un vector Indexando negativamente (OJO, para data.frames y listas se puede usar la opción NULL) # Ejemplo1 vector &lt;- c(1:10) vector &lt;- vector[-c(6:10)] vector ## [1] 1 2 3 4 5 # Ejemplo2 vector &lt;- c(1:10) vector &lt;- vector[c(-6, -7, -8, -9, -10)] vector ## [1] 1 2 3 4 5 # Ejemplo3 vector &lt;- c(1:10) vector &lt;- vector[vector&lt;6] vector ## [1] 1 2 3 4 5 1.2.1.5 Operaciones aritméticas con vectores Adición, multiplicación y división Ejemplo suma con vectores v1 &lt;- c(1:5) v2 &lt;- c(5:1) v3 &lt;- c(1:5) v4 &lt;- c(5:1) suma &lt;- v1 + v2 + v3 + v4 promedio &lt;- suma/3 promedio ## [1] 4 4 4 4 4 Reciclaje en operaciones con vectores Aritmética con vectores de diferentes longitudes Reciclaje en operaciones con vectores v1 &lt;- c(92, 90, 84, 95, 77, 92, 85) v2 &lt;- c(87, 81) suma &lt;- v1 + v2 suma ## [1] 179 171 171 176 164 173 172 1.2.1.6 Usando nombres en vectores Filosofia nombre vectores # Alternativa 1 vector = c(a = 1, b = 2, c = 3, d = 4, e = 5) vector ## a b c d e ## 1 2 3 4 5 # Alternativa 2 vector1 &lt;- c(1L:5L) Nombres &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) # letters[c(1:5)] # letters[seq(1,5)] names(vector1) &lt;- Nombres vector1 ## a b c d e ## 1 2 3 4 5 # Indexación vector1[c(&#39;a&#39;, &#39;e&#39;)] ## a e ## 1 5 # Reemplazar valores vector1[c(&#39;a&#39;, &#39;e&#39;)] &lt;- 6L vector1 ## a b c d e ## 6 2 3 4 6 # Revisar los nombres de un vector names(vector1) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; 1.2.2 Matrices Las matrices, como los vectores, son estructuras bidimensionales de datos con la totalidad de elementos del mismo tipo. Es decir, los elementos de las matrices pueden ser de tipo numérico (enteros y dobles), lógico y de tipo caractér (cadena). Representación gráfica de una matriz Relación entre vectores y matrices 1.2.2.1 Creando matrices Las matrices se crean a través de la función matrix() Modificando vectores Una foma de crear matrices es reestructurando un vector en matrices, como se observa en la siguiente figura. Ilustración matrices # Ejemplo 1 - Por defecto - columnas matrix(c(1:5)) ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 ## [5,] 5 # Ejemplo 2 - Indicando filas y columnas matrix(1:12, nrow = 4, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 3 - Por filas matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 # Ejemplo 4 - Sin definir columnas matrix(1:12, nrow = 4) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 5 - Sin definir filas matrix(1:12, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 # Ejemplo 6 - Con secuencias matrix(seq(from = 2, to = 8, by = 2), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] 2 6 ## [2,] 4 8 # Ejemplo 7 - Con repeticiones matrix(rep(1,4), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] 1 1 ## [2,] 1 1 # Ejemplo 8 - Reciclando elementos matrix(1:7, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 1 ## [3,] 3 6 2 # Ejemplo 9 - Con elementos lógicos matrix(c(TRUE, FALSE, FALSE, TRUE), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] TRUE FALSE ## [2,] FALSE TRUE # Ejemplo 10 - Con elementos tipo caractér - cadena matrix(c(&#39;Lunes&#39;, &#39;Martes&#39;, &#39;Miércoles&#39;, &#39;Jueves&#39;, &#39;Viernes&#39;, &#39;Sábado&#39;), nrow = 3, ncol = 2) ## [,1] [,2] ## [1,] &quot;Lunes&quot; &quot;Jueves&quot; ## [2,] &quot;Martes&quot; &quot;Viernes&quot; ## [3,] &quot;Miércoles&quot; &quot;Sábado&quot; Combinando vectores A través de las funciones rbind() y cbind() v1 &lt;- c(1, 2, 3) v2 &lt;- c(3, 2, 1) v3 &lt;- c(1, 2, 3) # creación de matrices con vectores- por filas fil_matriz &lt;- rbind(v1, v2, v3) fil_matriz ## [,1] [,2] [,3] ## v1 1 2 3 ## v2 3 2 1 ## v3 1 2 3 # creación de matrices con vectores- por columnas col_matriz &lt;- cbind(v1, v2, v3) col_matriz ## v1 v2 v3 ## [1,] 1 3 1 ## [2,] 2 2 2 ## [3,] 3 1 3 1.2.2.2 Nombrando las dimensiones de una matriz Una matriz está conformada por dos dimensiones (filas y columnas). El nombre de las filas y de las columnas se da a través de las funciones rownames() y colnames(). # matriz básica matriz &lt;- matrix(c(1:4), nrow = 2, ncol = 2, byrow = TRUE) matriz ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 # Matriz con nombres de filas y columnas rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;) matriz ## c_1 c_2 ## f_1 1 2 ## f_2 3 4 # Consultar los nombres de filas y columnas en una matriz # Nombre de las filas rownames(matriz) ## [1] &quot;f_1&quot; &quot;f_2&quot; # Nombre de las columnas colnames(matriz) ## [1] &quot;c_1&quot; &quot;c_2&quot; 1.2.2.3 Indexación en matrices Ilustración idexación en matrices A partir de una matriz podemos extraer/indexar con tres propósitos. Extraer un elemento [fila, columna] Extraer una fila o filas [fila, ] Extraer una columna o columnas [, columna] Indexación básica matriz &lt;- matrix(c(1:4), nrow = 2, ncol = 2, byrow = TRUE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;) matriz ## c_1 c_2 ## f_1 1 2 ## f_2 3 4 # Extraer el elemento ubicado en la fila 2 y la columna 1 matriz[2,1] ## [1] 3 # Extraer la fila 1 matriz[1, ] ## c_1 c_2 ## 1 2 # Extraer la columna 2 matriz[, 2] ## f_1 f_2 ## 2 4 Indexación a través de vectores vectores numéricos (enteros) vectores lógicos vectores de caractéres (nombres de filas o columnas) matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Con vectores numéricos - filas 1 y 2 matriz[c(1:2), ] ## c_1 c_2 c_3 ## f_1 1 4 7 ## f_2 2 5 8 # Con vectores lógicos - columnas 1 y 3 # Igual a matriz[, c(TRUE, FALSE, TRUE, FALSE)] matriz[, c(TRUE, FALSE)] ## c_1 c_3 ## f_1 1 7 ## f_2 2 8 ## f_3 3 9 # Con vectores de caractéres - columnas 2 y 3 - filas 1 y 3 matriz[c(1,3), c(&#39;c_2&#39;, &#39;c_3&#39;)] ## c_2 c_3 ## f_1 4 7 ## f_3 6 9 1.2.2.4 Modificando elementos en matrices Se puede modificar un único elemento dentro de una matriz o bloques de elementos (más de un elementos). Veámos estas ídeas gráficamente Ilustración modificación de un elemento dentro de una matriz # Ejemplo matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Modificar elemento (3,3) por 20 matriz[3, 3] &lt;- 30 matriz ## c_1 c_2 c_3 ## f_1 1 4 7 ## f_2 2 5 8 ## f_3 3 6 30 Ilustración modificación de un bloque de elementos dentro de una matriz # Ejemplo matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Modificar filas 1,2 y columnas 2 y 3 matriz[c(1,2), c(&#39;c_2&#39;, &#39;c_3&#39;)] &lt;- 0 matriz ## c_1 c_2 c_3 ## f_1 1 0 0 ## f_2 2 0 0 ## f_3 3 6 9 1.2.2.5 Adicionando elementos en matrices En las matrices se pueden adicionar filas o columnas. A continuación se presenta una ilustración gráfica de estas dos ideas. Ilustración adicionar filas o culmnas en una matriz Para adicionar filas en una matriz se hace uso de la función rbind(); para adicionar columnas, se hace uso de la función cbind. matriz1 &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz1) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz1) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Adicionar una fila matriz1 &lt;- rbind(matriz, &#39;c_4&#39; = c(4, 7, 10)) matriz1 ## c_1 c_2 c_3 ## f_1 1 0 0 ## f_2 2 0 0 ## f_3 3 6 9 ## c_4 4 7 10 # Adicionar dos columnas matriz2 &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz2) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz2) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Adicionar una fila matriz2 &lt;- cbind(matriz2, matrix(c(7:12), nrow = 3, ncol = 2)) colnames(matriz2) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;, &#39;c_4&#39;, &#39;c_5&#39;) matriz2 ## c_1 c_2 c_3 c_4 c_5 ## f_1 1 4 7 7 10 ## f_2 2 5 8 8 11 ## f_3 3 6 9 9 12 1.2.2.6 Removiendo elementos en matrices 1.2.2.7 Operaciones con matrices 1.2.3 Arreglos Representación gráfica de un Array (arreglo) 1.2.4 Data frames Representación gráfica de un Data Frame (marco de datos) 1.2.5 Listas Representación gráfica de una lista "],
["1-3-operadores-y-selección.html", "1.3 Operadores y selección", " 1.3 Operadores y selección 1.3.1 Operadores lógicos 1.3.2 Selección de elementos "],
["1-4-programación-con-r.html", "1.4 Programación con R", " 1.4 Programación con R "],
["2-Trans.html", "Capítulo 2 Transformación de datos con R ", " Capítulo 2 Transformación de datos con R "],
["2-1-importarexportar-datos.html", "2.1 Importar/exportar datos", " 2.1 Importar/exportar datos "],
["2-2-limpiar-datos.html", "2.2 Limpiar datos", " 2.2 Limpiar datos "],
["2-3-verbos-seleccionar-reubicar-mutar-y-filtrar.html", "2.3 Verbos: seleccionar, reubicar, mutar y filtrar", " 2.3 Verbos: seleccionar, reubicar, mutar y filtrar "],
["2-4-verbos-agrupar-ordenar-y-cruzar-.html", "2.4 Verbos: agrupar, ordenar y cruzar.", " 2.4 Verbos: agrupar, ordenar y cruzar. "],
["3-Vis.html", "Capítulo 3 Visualización con R ", " Capítulo 3 Visualización con R "],
["3-1-visualización-r-base.html", "3.1 Visualización - R base", " 3.1 Visualización - R base "],
["3-2-visualización-ggplot-1.html", "3.2 Visualización - Ggplot 1", " 3.2 Visualización - Ggplot 1 "],
["3-3-visualización-ggplot-2.html", "3.3 Visualización - Ggplot 2", " 3.3 Visualización - Ggplot 2 "],
["4-Est.html", "Capítulo 4 Estadística con R ", " Capítulo 4 Estadística con R "],
["4-1-estadística-descriptiva.html", "4.1 Estadística descriptiva", " 4.1 Estadística descriptiva "],
["4-2-estadística-bivariada.html", "4.2 Estadística bivariada", " 4.2 Estadística bivariada "],
["4-3-regresión-lineal.html", "4.3 Regresión lineal", " 4.3 Regresión lineal "],
["4-4-regresión-logística.html", "4.4 Regresión logística", " 4.4 Regresión logística "],
["5-Pub.html", "Capítulo 5 Publicación de resultados con R ", " Capítulo 5 Publicación de resultados con R "],
["5-1-rmarkdown-1.html", "5.1 Rmarkdown 1", " 5.1 Rmarkdown 1 "],
["5-2-rmarkdown-1-1.html", "5.2 Rmarkdown 1", " 5.2 Rmarkdown 1 "],
["5-3-pdf-word-y-powerpoint.html", "5.3 Pdf, Word y PowerPoint", " 5.3 Pdf, Word y PowerPoint "],
["6-Ava.html", "Capítulo 6 Tópicos avanzados con R", " Capítulo 6 Tópicos avanzados con R "]
]
