[
["index.html", "Un Primer Curso de R Portada", " Un Primer Curso de R Alberto Rodríguez Rodríguez Última actualización: 01 de agosto de 2020 Portada "],
["Presenta.html", "Presentación", " Presentación Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum "],
["1-Fund.html", "Capítulo 1 Fundamentos del lenguaje R", " Capítulo 1 Fundamentos del lenguaje R Ciclo de vida de la ciencia de los datos Ilustración ciclo de vida Ciencia de Datos "],
["1-1-introR.html", "1.1 Introducción a R", " 1.1 Introducción a R En R, como en los demás lenguajes de programación un programa se le llama códico o scrip y cada línea de dicho código se conoce como linea de código. Para que un scrip o código de un lenguaje de programación sea entendido por nuestras computadoras, estos imponene algunas reglas básicas. A continuación se presentan las primeras dos reglas básica del lenguaje de programación R. Regla: Mayúsculas y Minúsculas - (Case Sensitive) R, a diferencia de otros lenguajes de programación, distingue/diferencia entre mayúsculas y minúsculas (Case Sensitive). Es decir, una letrá mayúscula es diferente a su contraparte en minúscula. Regla 2. R sólo permite una instrucción por línea de código "],
["1-2-Tdatos.html", "1.2 Tipos de datos en R", " 1.2 Tipos de datos en R En R existen 5 tipos de datos básicos: lógicos, reales - numéricos, enteros - numéricos, cadena/caracter y complejos Lógicos Los tipos de datos lógicos, también conocidos como booleanos, representan en R falso o verdadero y se representan mediante las letras o palabras mayúsculas F o FALSE para el caso de falso y T o TRUE para el caso de verdadero. Ejemplo. Datos lógicos # Opciones para verdadero (T o TRUE) T ## [1] TRUE TRUE ## [1] TRUE # Opciones para falso (F o FALSE) F ## [1] FALSE FALSE ## [1] FALSE Los tipos de datos numéricos em R se representan mediante dos tipos de datos (reales o enteros). A continuación, se representa el detalle de cada uno de ellos. Reales - numéricos También conocidos como numéros/datos decimales o dobles… En R, el punto (.) se utiliza para separar, en un número real, la parte entera de la parte decimal. Por ejemplo, 3.14, 30.48, 2.05, son representaciones de números reales en R. cuando el número es muy grande o muy pequeño R, por defecto, los representa mediante notación científica haciendo uso de la letra (e). Por ejemplo, 1e-11 es la representación científica/notación del número real 0.00000000001. Ejemplo. Datos reales/decimales # numéros reales convencionales 3 ## [1] 3 3.14 ## [1] 3.14 30.48 ## [1] 30.48 2.05 ## [1] 2.05 # numéros reales pequeños - notación científica 1234567891011 ## [1] 1.234568e+12 # número reales grandes - notación científica 0.00000000001 ## [1] 1e-11 Enteros - numéricos En R, a menos que se le diga lo contrario, todo número, por defecto, es considerado real. Para representar números/datos de tipo entero en R; es decir, aquellos que carecen de parte decimal, estos deben estar acompañados de la letra mayúscula (L). Por ejemplo, 3L representa el número entero 3. Ejemplo. Datos enteros 5L ## [1] 5 3L ## [1] 3 -20L ## [1] -20 Cadena o caracter En R, cuando se desea represnetar palabras o caracteres especiales se hace a través de los tipos de datos llamados cadena o caracter. Un tipo de dato caracter o texto en R se representa/encierra mediante comillas dobles \" o sencillas ’ pero no a través de una mezcla entre comillas dobles y sencillas. “Hola”, “Este es un dato de tipo texto”, ‘dato con comillas sencillas’, son algunos ejemplos de datos de tipo cadena, texto o caracter. Ejemplo. Datos cadena/caracter # Con comillas sencillas y dobles &quot;Hola&quot; ## [1] &quot;Hola&quot; &quot;Este es otro dato de tipo texto&quot; ## [1] &quot;Este es otro dato de tipo texto&quot; &quot;TRUE&quot; ## [1] &quot;TRUE&quot; &#39;dato con comillas sencillas&#39; ## [1] &quot;dato con comillas sencillas&quot; &#39;Tres&#39; ## [1] &quot;Tres&quot; &#39;2.35&#39; ## [1] &quot;2.35&quot; # Con comillas mezcladas # &quot;Cinco&#39; - Retorna un error Complejos Ejemplo. Datos complejos/imaginarios "],
["1-3-Aritmet.html", "1.3 Operaciones aritméticas y variables en R", " 1.3 Operaciones aritméticas y variables en R 1.3.1 Operaciones aritméticas en R Básicas: suma (+), resta (-), multiplicación (*) y división (/)- Ejemplos. Operaciones aritméticas básicas #Suma 3.5 + 7.7 ## [1] 11.2 3L + 10L ## [1] 13 1 + 8 ## [1] 9 #Resta 7.7 - 3.7 ## [1] 4 3L - 10L ## [1] -7 8 - 6 ## [1] 2 #Multiplicación 7.71 * 3.73 ## [1] 28.7583 -3L * 10L ## [1] -30 1 * 8 ## [1] 8 #División 7.7 / 3.7 ## [1] 2.081081 12L / 4L ## [1] 3 -1 / 4 ## [1] -0.25 Complementarias: -Exponenciales (^), división entera (%/%) y módulos (%%) Exponenciales: Consiste, como se muestra en la fórmula en elevar un número x a una potencia n. Es decir, multiplicar x por sí mismo tantas veces como se defina en n. \\[\\begin{equation} x^n \\end{equation}\\] Divisón entera: La división entera de x%/%n devuelve el número máximo de veces que se encuentra n en x. Módulos: El módulo x%%n devuelve el residuo o resto de la división entera de x por n. Ejemplos. Operaciones complementarias # Exponenciales 2^3 ## [1] 8 3^2 ## [1] 9 # Divisiones enteras 15%/%3 ## [1] 5 17%/%3 ## [1] 5 9%/%4 ## [1] 2 # Módulos 15%%3 ## [1] 0 17%%3 ## [1] 2 9%%4 ## [1] 1 Operaciones complejas Una operación aritmética “compleja” consiste en la combinación de varias operaciones simples. Ejemplos. Operaciones complejas 2 + 2 + 3*2 ## [1] 10 2*5 - 6/2 ## [1] 7 6/2*10/2 + 3 ## [1] 18 6/2*(2+1) ## [1] 9 Reglas de priorización en operaciones aritméticas en R Regla 3. “Los paréntesis se calculan primero, luego los exponentes, luego la división y multiplicación, y finalmente, la suma y la resta.” Ilustración prioridad aritmética en R Ejemplo. Operaciones con prioridad aritmética # por defecto 2 + 3*5 ## [1] 17 # usando paréntesis (2 + 3)*5 ## [1] 25 Ver el siguiente artículo, publicado en el diario el Espectador, sobre la importancia del tema publicado por el profesor Ignación Mantilla, Exrector de la Universidad Nacional de Colombia. Ver artículo directamente en: Ecuaciones de opinión Tipos de datos en expresiones numéricas Ilustración prioridad aritmética en R Operaciones entre datos del mismo tipo, producen el mismo tipo de datos. Operaciones entre diferentes tipos de datos, producen el tipo de datos más elevado de acuerdo al siguiente ordenamiento (Numeric &gt; integer &gt; Logical) Ejemplo. Tipos de datos resultantes de expresiones numéricas 1L + 2L + 2L ## [1] 5 3L + 2 ## [1] 5 3L + 3*3 + 5/2 ## [1] 14.5 1.3.2 Variables en R Para crear variables se requieren dos pasos: crear el nombre de la variable y asignar valores u objetos al nombre de la variable creada haciendo uso del símbolo (&lt;-). También se puede usar el símbolo (=) aunque por buenas prácticas en R y, para evitar su confusión con el uso de este símbolo de otras rutinas, no se recomienda su uso para la asignación de valores a variables. Se crear variables para después reutilizarlas. Regla 4. Para nombrar una variable, hay cinco reglas de nombres a seguir. Los nombres de las variables consisten en letras (mayúsculas o minúsculas), números, un punto (.) O un guión bajo ()._ Podemos comenzar un nombre de variable con una letra o un punto, pero los puntos no pueden ser seguidos por un número. No podemos comenzar un nombre de variable con un número. No se permiten caracteres especiales, por ejemplo, espacios, símbolos de operador \", paréntesis. No podemos usar una palabra clave ya utilizada e interpretada por R como un nombre de variable. PALABRAS RESERVADAS Ver el siguiente ejemplo para el caso de espacios entre variables (var1 var2 &lt;- 12) Ver también el siguiente ejemplo ‘var11’ &lt;- 2 Ilustración validez nombres variables Para ver el resultado de una variable debemos crear una nueva linea de código con el nombre de dicha variable. var &lt;- c(1:3) var 1.3.3 Identificando el tipo de variables - Primera función A las funciones se les puede llamar pequeños programas que permiten hacer alguna cosa. Para identificar el tipo de elementos que conforman una variable, podemos hacer uso de la función class(). Ejemplo. Tipos de variables en R var_1 &lt;- TRUE var_2 &lt;- 2L var_3 &lt;- 0.14 var_4 &lt;- var_1 + var_2 + var_3 class(var_1) ## [1] &quot;logical&quot; class(var_2) ## [1] &quot;integer&quot; class(var_3) ## [1] &quot;numeric&quot; class(var_4) ## [1] &quot;numeric&quot; El valor lógico TRUE, en R, asume un valor de 1; el valor lógico FALSE asume un valor de 0 "],
["1-4-Elogicas.html", "1.4 Expresiones lógicas en R", " 1.4 Expresiones lógicas en R Las expresiones lógicas se basan en los literales lógicos. Es decir, TRUE y FALSE o simplemente T y F. 1.4.1 Operadores Relacionales Los operadores relacionales disponibles en R son: Menor que ( &lt; ) Mayor que ( &gt; ) Menor o igual que ( &lt;= ) Mayor o igual que ( &gt;= ) Igual a ( == ) No es igual a (diferente) ( != ) A continuación se presentan dos tipos de ejemplos con el uso de expresiones regulares: simples y a través de expresiones aritméticas Ejemplo. Expresiones lógicas simples 3 &gt;= 2 ## [1] TRUE 3 &gt; 3 ## [1] FALSE 1 &lt; 3 ## [1] TRUE 4 &lt;= 4 ## [1] TRUE 3 == 3 ## [1] TRUE 3 != 3 ## [1] FALSE TRUE == FALSE ## [1] FALSE TRUE == 1 ## [1] TRUE FALSE == 0 ## [1] TRUE FALSE != 0 ## [1] FALSE Regla 5. Al evaluar un operador lógico con expresiones aritméticas, primero se evaluan las expresiones aritméticas y luego las expresiones lógicas Ejemplo. Operaciones lógicas entre expresiones aritméticas 12.10 - 10.50 &lt; 24.90 - 21.15 ## [1] TRUE apple_profit &lt;- 12.10 - 10.50 mango_profit &lt;- 24.90 - 21.15 apple_profit &lt; mango_profit ## [1] TRUE Finalmente, en R se puede almacenar el resultado de una comparación lógica dentro de una variable. logical_var &lt;- apple_profit &lt; mango_profit apple_sold &lt;- 12.10 * 12L lemon_sold &lt;- 4.99 * 24L logical_var &lt;- apple_sold == lemon_sold logical_var ## [1] FALSE Los operadores relacionales se emplean para hacer comparaciones entre valores (expresiones). El resultado de la aplicación de los operadores relacionales es TRUE o FALSE 1.4.2 Operadores Lógicos Los operadores lógicos disponibles en R son: No lógico ( ! ) _** Y lógico ( &amp; )**_ _** O lógico ( | )**_ Revisar los operadores (&amp;&amp; y ||), como se presenta en la siguiente ilustración. Ilustración Resultado operadores lógicos 1.4.3 Combinando operadores Regla 5. Priorización o precedencia general Teniendo en cuenta todos los operadores vistos hasta ahora, la regla de priorización general es: Paréntesis Exponentes División y multiplicación Adición y sustracción Operadores relacionales Operadores logicos Estudiarr el siguiente caso con vectores a &lt;- 3 b &lt;- 15 a:b a+1:b a+(1:b) (a+1):b Caso tomado de Ejemplo. Combinando operadores apple_profit &lt;- 12.10 - 10.50 mango_profit &lt;- 24.90 - 21.15 lemon_profit &lt;- 4.99 - 3.20 logical_var &lt;- apple_profit &lt;= mango_profit || apple_profit &gt; mango_profit logical_var ## [1] TRUE "],
["1-5-Edatos.html", "1.5 Estructuras de datos", " 1.5 Estructuras de datos Principales estructuras de datos en R. Extraída de https://medium.com/@tiwarigaurav2512/r-data-types-847fffb01d5b 1.5.1 Vectores Importancia de la función c() Representación gráfica de un vector vector1 &lt;- 1 vector2 &lt;- c(1) # vector3 &lt;- 1, 2 vector4 &lt;- 1:2 vector5 &lt;- c(1,2) Mi primer vector. # Mi primer vector con 5 elementos c(1, 2, 3, 4, 5) ## [1] 1 2 3 4 5 # Matriz con tres filas y cuatro columnas matrix(1:12, nrow = 3, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 1.5.1.1 Tipos de vectores Lógicos # Mi primer vector Lógico c(TRUE, FALSE, FALSE, TRUE) Enteros # Mi primer vector entero c(12L, 3L, 24L, 8L) Reales # Mi primer vector real c(12.10, 24.90, 4.99) Cadena # Mi primer vector cadena c(&quot;Lunes&quot;, &quot;Martes&quot;, &quot;Miércoles&quot;,&quot;Jueves&quot;, &quot;Viernes&quot;, &quot;Sábado&quot;,&quot;Domingo&quot;) 1.5.1.2 Cómo crear vectores rápidamente Funciones (seq() y rep()) 1.5.1.3 Indexación de vectores Fuente: Manual R Base Indexación Cómo extraer elementos de un vector - R es un lenguaje de programación indexado en 1; es decir, al primer elemento de un vector se le asigna la posición 1. Para extraer elementos de un vector usamos corchetes [] Gráfico de indexación de vectores 1.5.1.3.1 Por posición Nombre_vector[3] Nombre_vector[c(3)] Nombre_vector[1:4] Nombre_vector[c(1:4)] Nombre_vector[c(1,3,7)] Nombre_vector[-c(1,3,7)] 1.5.1.3.2 Por vectores lógicos Nombre_vector[c(LOGICO)] 1.5.1.4 Modificar, anexar, remover elementos de un vector Modificar elementos de un vector vector &lt;- c(1L:5L) vector[5] &lt;- 6L vector ## [1] 1 2 3 4 6 vector1 &lt;- c(1L:5L) vector1[c(3:5)] &lt;- 6L vector1 ## [1] 1 2 6 6 6 vector2 &lt;- c(1L:5L) vector2[c(TRUE, FALSE, FALSE, FALSE, TRUE)] &lt;- 6L vector2 ## [1] 6 2 3 4 6 Adicionar elementos a un vector vector1 &lt;- c(1:3) vector2 &lt;- c(4:5) # nuevo vector vector3_1 &lt;- c(vector1, vector2) vector3_1 ## [1] 1 2 3 4 5 # mismo vector vector1[c(4:5)] &lt;- c(4:5) vector1 ## [1] 1 2 3 4 5 Remover elementos de un vector Indexando negativamente (OJO, para data.frames y listas se puede usar la opción NULL) # Ejemplo1 vector &lt;- c(1:10) vector &lt;- vector[-c(6:10)] vector ## [1] 1 2 3 4 5 # Ejemplo2 vector &lt;- c(1:10) vector &lt;- vector[c(-6, -7, -8, -9, -10)] vector ## [1] 1 2 3 4 5 # Ejemplo3 vector &lt;- c(1:10) vector &lt;- vector[vector&lt;6] vector ## [1] 1 2 3 4 5 1.5.1.5 Operaciones aritméticas con vectores Adición, multiplicación y división Ejemplo suma con vectores v1 &lt;- c(1:5) v2 &lt;- c(5:1) v3 &lt;- c(1:5) v4 &lt;- c(5:1) suma &lt;- v1 + v2 + v3 + v4 promedio &lt;- suma/3 promedio ## [1] 4 4 4 4 4 Reciclaje en operaciones con vectores Aritmética con vectores de diferentes longitudes Reciclaje en operaciones con vectores v1 &lt;- c(92, 90, 84, 95, 77, 92, 85) v2 &lt;- c(87, 81) suma &lt;- v1 + v2 suma ## [1] 179 171 171 176 164 173 172 1.5.1.6 Usando nombres en vectores Filosofia nombre vectores # Alternativa 1 vector = c(a = 1, b = 2, c = 3, d = 4, e = 5) vector ## a b c d e ## 1 2 3 4 5 # Alternativa 2 vector1 &lt;- c(1L:5L) Nombres &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) # letters[c(1:5)] # letters[seq(1,5)] names(vector1) &lt;- Nombres vector1 ## a b c d e ## 1 2 3 4 5 # Indexación vector1[c(&#39;a&#39;, &#39;e&#39;)] ## a e ## 1 5 # Reemplazar valores vector1[c(&#39;a&#39;, &#39;e&#39;)] &lt;- 6L vector1 ## a b c d e ## 6 2 3 4 6 # Revisar los nombres de un vector names(vector1) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; 1.5.1.7 Coerción en vectores Regla:Coerción character → double → integer → logical. Es decir, si existe un vector con elementos de tipo lógico y de tipo entero, el resultado es un vector con elemento de tipo entero. Si existe un vector elementos de tipo lógico, entero y real, el resultado es un vector de tipo real. Finalmente, si existe un vector con elementos de tipo lógico, entero, real y caracter o cadena, el resultado es un vector de tipo caracter. 1.5.2 Matrices Las matrices, como los vectores, son estructuras bidimensionales de datos con la totalidad de elementos del mismo tipo. Es decir, los elementos de las matrices pueden ser de tipo numérico (enteros y dobles), lógico y de tipo caractér (cadena). Representación gráfica de una matriz Relación entre vectores y matrices 1.5.2.1 Creando matrices Las matrices se crean a través de la función matrix() Modificando vectores Una foma de crear matrices es reestructurando un vector en matrices, como se observa en la siguiente figura. Ilustración matrices # Ejemplo 1 - Por defecto - columnas matrix(c(1:5)) ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 ## [5,] 5 # Ejemplo 2 - Indicando filas y columnas matrix(1:12, nrow = 4, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 3 - Por filas matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 # Ejemplo 4 - Sin definir columnas matrix(1:12, nrow = 4) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 5 - Sin definir filas matrix(1:12, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 # Ejemplo 6 - Con secuencias matrix(seq(from = 2, to = 8, by = 2), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] 2 6 ## [2,] 4 8 # Ejemplo 7 - Con repeticiones matrix(rep(1,4), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] 1 1 ## [2,] 1 1 # Ejemplo 8 - Reciclando elementos matrix(1:7, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 1 ## [3,] 3 6 2 # Ejemplo 9 - Con elementos lógicos matrix(c(TRUE, FALSE, FALSE, TRUE), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] TRUE FALSE ## [2,] FALSE TRUE # Ejemplo 10 - Con elementos tipo caractér - cadena matrix(c(&#39;Lunes&#39;, &#39;Martes&#39;, &#39;Miércoles&#39;, &#39;Jueves&#39;, &#39;Viernes&#39;, &#39;Sábado&#39;), nrow = 3, ncol = 2) ## [,1] [,2] ## [1,] &quot;Lunes&quot; &quot;Jueves&quot; ## [2,] &quot;Martes&quot; &quot;Viernes&quot; ## [3,] &quot;Miércoles&quot; &quot;Sábado&quot; Combinando vectores A través de las funciones rbind() y cbind() v1 &lt;- c(1, 2, 3) v2 &lt;- c(3, 2, 1) v3 &lt;- c(1, 2, 3) # creación de matrices con vectores- por filas fil_matriz &lt;- rbind(v1, v2, v3) fil_matriz ## [,1] [,2] [,3] ## v1 1 2 3 ## v2 3 2 1 ## v3 1 2 3 # creación de matrices con vectores- por columnas col_matriz &lt;- cbind(v1, v2, v3) col_matriz ## v1 v2 v3 ## [1,] 1 3 1 ## [2,] 2 2 2 ## [3,] 3 1 3 1.5.2.2 Nombrando las dimensiones de una matriz Una matriz está conformada por dos dimensiones (filas y columnas). El nombre de las filas y de las columnas se da a través de las funciones rownames() y colnames(). # matriz básica matriz &lt;- matrix(c(1:4), nrow = 2, ncol = 2, byrow = TRUE) matriz ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 # Matriz con nombres de filas y columnas rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;) matriz ## c_1 c_2 ## f_1 1 2 ## f_2 3 4 # Consultar los nombres de filas y columnas en una matriz # Nombre de las filas rownames(matriz) ## [1] &quot;f_1&quot; &quot;f_2&quot; # Nombre de las columnas colnames(matriz) ## [1] &quot;c_1&quot; &quot;c_2&quot; 1.5.2.3 Indexación en matrices Ilustración idexación en matrices A partir de una matriz podemos extraer/indexar con tres propósitos. Extraer un elemento [fila, columna] Extraer una fila o filas [fila, ] Extraer una columna o columnas [, columna] Indexación básica matriz &lt;- matrix(c(1:4), nrow = 2, ncol = 2, byrow = TRUE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;) matriz ## c_1 c_2 ## f_1 1 2 ## f_2 3 4 # Extraer el elemento ubicado en la fila 2 y la columna 1 matriz[2,1] ## [1] 3 # Extraer la fila 1 matriz[1, ] ## c_1 c_2 ## 1 2 # Extraer la columna 2 matriz[, 2] ## f_1 f_2 ## 2 4 Indexación a través de vectores vectores numéricos (enteros) vectores lógicos vectores de caractéres (nombres de filas o columnas) matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Con vectores numéricos - filas 1 y 2 matriz[c(1:2), ] ## c_1 c_2 c_3 ## f_1 1 4 7 ## f_2 2 5 8 # Con vectores lógicos - columnas 1 y 3 # Igual a matriz[, c(TRUE, FALSE, TRUE, FALSE)] matriz[, c(TRUE, FALSE)] ## c_1 c_3 ## f_1 1 7 ## f_2 2 8 ## f_3 3 9 # Con vectores de caractéres - columnas 2 y 3 - filas 1 y 3 matriz[c(1,3), c(&#39;c_2&#39;, &#39;c_3&#39;)] ## c_2 c_3 ## f_1 4 7 ## f_3 6 9 1.5.2.4 Modificando elementos en matrices Se puede modificar un único elemento dentro de una matriz o bloques de elementos (más de un elementos). Veámos estas ídeas gráficamente Ilustración modificación de un elemento dentro de una matriz # Ejemplo matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Modificar elemento (3,3) por 20 matriz[3, 3] &lt;- 30 matriz ## c_1 c_2 c_3 ## f_1 1 4 7 ## f_2 2 5 8 ## f_3 3 6 30 Ilustración modificación de un bloque de elementos dentro de una matriz # Ejemplo matriz &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Modificar filas 1,2 y columnas 2 y 3 matriz[c(1,2), c(&#39;c_2&#39;, &#39;c_3&#39;)] &lt;- 0 matriz ## c_1 c_2 c_3 ## f_1 1 0 0 ## f_2 2 0 0 ## f_3 3 6 9 1.5.2.5 Adicionando elementos en matrices En las matrices se pueden adicionar filas o columnas. A continuación se presenta una ilustración gráfica de estas dos ideas. Ilustración adicionar filas o culmnas en una matriz Para adicionar filas en una matriz se hace uso de la función rbind(); para adicionar columnas, se hace uso de la función cbind. matriz1 &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz1) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz1) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Adicionar una fila matriz1 &lt;- rbind(matriz, &#39;c_4&#39; = c(4, 7, 10)) matriz1 ## c_1 c_2 c_3 ## f_1 1 0 0 ## f_2 2 0 0 ## f_3 3 6 9 ## c_4 4 7 10 # Adicionar dos columnas matriz2 &lt;- matrix(c(1:9), nrow = 3, ncol = 3, byrow = FALSE) rownames(matriz2) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;) colnames(matriz2) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) # Adicionar una fila matriz2 &lt;- cbind(matriz2, matrix(c(7:12), nrow = 3, ncol = 2)) colnames(matriz2) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;, &#39;c_4&#39;, &#39;c_5&#39;) matriz2 ## c_1 c_2 c_3 c_4 c_5 ## f_1 1 4 7 7 10 ## f_2 2 5 8 8 11 ## f_3 3 6 9 9 12 1.5.2.6 Removiendo elementos en matrices Se eliminan columnas o elementos de columnas haciendo uso del simbolo (-) entre corchetes. [-() , -c()] Ejemplo. Removiendo elementos de matrices #Creando una matriz matriz &lt;- matrix(1:12, nrow = 4, ncol = 3) rownames(matriz) &lt;- c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;, &#39;f_4&#39;) colnames(matriz) &lt;- c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;) matriz ## c_1 c_2 c_3 ## f_1 1 5 9 ## f_2 2 6 10 ## f_3 3 7 11 ## f_4 4 8 12 # Eliminando primera fila matriz[-1, ] ## c_1 c_2 c_3 ## f_2 2 6 10 ## f_3 3 7 11 ## f_4 4 8 12 # Eliminando segunda columna matriz[ ,-2] ## c_1 c_3 ## f_1 1 9 ## f_2 2 10 ## f_3 3 11 ## f_4 4 12 # Eliminando haciendo uso de vectores - enteros matriz[-c(1,4), -3] ## c_1 c_2 ## f_2 2 6 ## f_3 3 7 # Eliminando haciendo uso de vectores lógicas - reciclando matriz[c(TRUE, FALSE), c(-1)] ## c_2 c_3 ## f_1 5 9 ## f_3 7 11 # Eliminando haciendo uso de vectores lógicas - sin reciclar matriz[c(TRUE, FALSE, TRUE, FALSE), c(-1)] ## c_2 c_3 ## f_1 5 9 ## f_3 7 11 # Eliminando haciendo uso de vectores lógicas - derivados de expresiones lógicas expl &lt;- matriz[, 3] &gt; 10 expl ## f_1 f_2 f_3 f_4 ## FALSE FALSE TRUE TRUE matriz[expl, c(-1)] ## c_2 c_3 ## f_3 7 11 ## f_4 8 12 1.5.2.7 Marginales en matrices Ver las funciones **rowSums(), colSums(), rowMeans(), colMeans()* Ilustración sumar filas y columnas Ejemplo. Marginales en matrices #Creando una matriz - haciendo uso de la función dimnames matriz1 &lt;- matrix(1:9, nrow = 3, ncol = 3, dimnames = list(c(&#39;f_1&#39;, &#39;f_2&#39;, &#39;f_3&#39;), c(&#39;c_1&#39;, &#39;c_2&#39;, &#39;c_3&#39;))) matriz1 ## c_1 c_2 c_3 ## f_1 1 4 7 ## f_2 2 5 8 ## f_3 3 6 9 # Suma de filas rowSums(matriz1) ## f_1 f_2 f_3 ## 12 15 18 # Suma de columnas colSums(matriz1) ## c_1 c_2 c_3 ## 6 15 24 # Promedio de filas rowMeans(matriz1) ## f_1 f_2 f_3 ## 4 5 6 # Promedio de columnas colMeans(matriz1) ## c_1 c_2 c_3 ## 2 5 8 1.5.2.8 Operaciones con matrices Las operaciones con matrices son la suma, la resta, la multiplicación y la división. 1.5.3 Arreglos Representación gráfica de un Array (arreglo) 1.5.4 Data frames Representación gráfica de un Data Frame (marco de datos) 1.5.5 Listas Una lista es una estructura de datos multidimensional que permite, en su interior, la disposición de estructuras de datos y objetos de diversas tipologías. Representación gráfica de una lista ¿Por qué querríamos crear listas de objetos en R? La respuesta es que almacenar objetos en listas nos permite utilizar algunas funciones R muy poderosas para realizar la misma operación en cada objeto de nuestra lista, lo que nos permite evitar escribir repetidamente la misma función. 1.5.5.1 Creando listas Las listas se crean a través de la función list(). Los elementos que hacen parte de una lista se separan, como en el caso de los vectores, a través de comas (,) y pueden ser de cualquier tipo. Ejemplos. Diferentes listas #Lista 1 list(1:3, &quot;a&quot;, c(TRUE, FALSE, TRUE), c(2.3, 5.9)) ## [[1]] ## [1] 1 2 3 ## ## [[2]] ## [1] &quot;a&quot; ## ## [[3]] ## [1] TRUE FALSE TRUE ## ## [[4]] ## [1] 2.3 5.9 #Lista 2 list(&quot;Hola mundo&quot;, 1, 1, 3, TRUE) ## [[1]] ## [1] &quot;Hola mundo&quot; ## ## [[2]] ## [1] 1 ## ## [[3]] ## [1] 1 ## ## [[4]] ## [1] 3 ## ## [[5]] ## [1] TRUE #Lista 3 list(país = &quot;Colombia&quot;, matriz = matrix(c(1:9), ncol =3), vector = c(TRUE, FALSE)) ## $país ## [1] &quot;Colombia&quot; ## ## $matriz ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 ## ## $vector ## [1] TRUE FALSE Revisar las posiciones, en el output, en las que aparece cada uno de los elementos de una lista a través del numero contenidoen [[]] 1.5.5.2 Nombrando listas La asignación de nombres a los elementos que conforman una lista, al igual que en el caso de los vectores, se logra haciendo uso de la función names(). #Lista mi_lista &lt;- list(1, 2, 3, 4) mi_lista ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 2 ## ## [[3]] ## [1] 3 ## ## [[4]] ## [1] 4 #Nombrando los elementos de la lista names(mi_lista) &lt;- c(&#39;a&#39;, &quot;b&quot;, &#39;c&#39;, &quot;d&quot;) # El resultado mi_lista ## $a ## [1] 1 ## ## $b ## [1] 2 ## ## $c ## [1] 3 ## ## $d ## [1] 4 1.5.5.3 Indexación en listas En las listas existen dos alternativas de indexación. Paréntesis individuales: Retorna una lista de elementos. Doble paréntesis: Retorna un único elemento. Ejemplos. Indexación con listas recurre &lt;- list(1,list(2,3, list(4,5))) #Extraer el número 5 - tres alternativas recurre[[c(2, 3)]][[2]] ## [1] 5 recurre[[2]][[3]][[2]] ## [1] 5 recurre[2][[1]][[3]][[2]] ## [1] 5 1.5.5.4 Modificar, adicionar y remover elementos de una lista 1.5.5.5 Combinando listas "],
["1-6-Progra.html", "1.6 Programación con R", " 1.6 Programación con R Revisar R para principiantes, en donde se presentan los principales tipos de estructuras de control existentes en R. Este documento también es util para … 1.6.1 if y else 1.6.2 for 1.6.3 while 1.6.4 break y next 1.6.5 repeat 1.6.6 La familia apply "],
["1-7-Mpracticas.html", "1.7 Mejores prácticas en R", " 1.7 Mejores prácticas en R Ver linemaientos sobre buena prácticas en R (Ortografía) Hablar sobre comentario c(1,2,3) en R produce el mismo resultado que c(1, 2, 3) "],
["2-Trans.html", "Capítulo 2 Transformación de datos con R ", " Capítulo 2 Transformación de datos con R "],
["2-1-importarexportar-datos.html", "2.1 Importar/exportar datos", " 2.1 Importar/exportar datos 2.1.1 Paquetes en R library(knitr) Personajes Trinity Neo Tank (operador) Nave “Nabucodonosor” “Necesito un curso para pilotar un helicoptero B-212” Para instalar paquetes desde CRAN. install.packages(&#39;&#39;) # Función para instalar paquetes desde CRAN Para instalar paquetes desde GitHub. Previamente se debe de haber instalado el paquete devtools. devtools::install_github(&quot;tylermorganwall/rayshader&quot;) # Función para instalar paquetes desde GitHub library(devtools) devtools para instalar desde GithHub Some text for this block. If you are planning on printing your book to PDF, you will need a LaTeX distribution. We recommend that you install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],
["2-2-tibbles-vs-data-frames.html", "2.2 Tibbles vs Data Frames", " 2.2 Tibbles vs Data Frames "],
["2-3-datos-ordenados-tidy-data.html", "2.3 Datos ordenados - Tidy Data", " 2.3 Datos ordenados - Tidy Data "],
["2-4-verbos-seleccionar-reubicar-mutar-y-filtrar.html", "2.4 Verbos: seleccionar, reubicar, mutar y filtrar", " 2.4 Verbos: seleccionar, reubicar, mutar y filtrar "],
["2-5-verbos-agrupar-ordenar-y-cruzar-.html", "2.5 Verbos: agrupar, ordenar y cruzar.", " 2.5 Verbos: agrupar, ordenar y cruzar. "],
["3-Vis.html", "Capítulo 3 Visualización con R ", " Capítulo 3 Visualización con R "],
["3-1-visualización-r-base.html", "3.1 Visualización - R base", " 3.1 Visualización - R base "],
["3-2-visualización-ggplot-1.html", "3.2 Visualización - Ggplot 1", " 3.2 Visualización - Ggplot 1 "],
["3-3-visualización-ggplot-2.html", "3.3 Visualización - Ggplot 2", " 3.3 Visualización - Ggplot 2 "],
["4-Est.html", "Capítulo 4 Estadística con R ", " Capítulo 4 Estadística con R "],
["4-1-estadística-descriptiva.html", "4.1 Estadística descriptiva", " 4.1 Estadística descriptiva "],
["4-2-estadística-bivariada.html", "4.2 Estadística bivariada", " 4.2 Estadística bivariada "],
["4-3-regresión-lineal.html", "4.3 Regresión lineal", " 4.3 Regresión lineal "],
["4-4-regresión-logística.html", "4.4 Regresión logística", " 4.4 Regresión logística "],
["5-Pub.html", "Capítulo 5 Publicación de resultados con R ", " Capítulo 5 Publicación de resultados con R "],
["5-1-rmarkdown-1.html", "5.1 Rmarkdown 1", " 5.1 Rmarkdown 1 "],
["5-2-rmarkdown-2.html", "5.2 Rmarkdown 2", " 5.2 Rmarkdown 2 "],
["5-3-pdf-word-y-powerpoint.html", "5.3 Pdf, Word y PowerPoint", " 5.3 Pdf, Word y PowerPoint "],
["6-Ava.html", "Capítulo 6 Tópicos avanzados con R", " Capítulo 6 Tópicos avanzados con R "]
]
