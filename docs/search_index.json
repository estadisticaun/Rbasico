[
["index.html", "Un Primer Curso de R Portada", " Un Primer Curso de R Alberto Rodríguez Rodríguez Última actualización: 12 de agosto de 2020 Portada "],
["Presenta.html", "Presentación", " Presentación Este libro, de naturaleza web, presenta los contenidos que pueden ser abordados en un primer curso orientado al aprendizaje de R. Este lenguaje, como muchos softwares estadísticos o de otra naturaleza, está conformado por una inmensa cantidad de funcionalidades que complejiza su aprendizaje y, desde luego, su enseñanza. Es tal el crecimiento que ha alcanzado R durante los últimos años que hoy el reto, para quienes trabajamos con él, no es estar actualizados sino lo menos desactualizados posibles; nunca, así nos lo propongamos, alcanzaremos a conocer y dominar todas las posibilidades y funcionalidades que R ofrece en la actualidad. El contenido del libro se divide en 5 grandes componentes derivados de un enfóque de aprendizaje desde lo que hoy se conoce, en el contexto de la gestión moderna de datos, como Ciencia de Datos: fundamentos del lenguaje R, limpieza y transformación de datos en R, visualización en R, modelamiento en R y comunicación de resultados en R. Sin importar si se labora en una empresa o se trabaja en el ámbito académico, estos 5 pasos, con mayor o menor medida, deben ser empleados en el proceso de generación de conocimiento a partir de los datos disponibles. Los datos se deben capturar y los mismos son de diversa naturaleza; una vez capturados deben ser importados y trasformados según nuestros intereses; una vez trasformados, para prósitos descriptivos o análiticos, estos deben ser representados de manera gráfica o tabular; agotadas las fases de transformación y visualización, se deben implementar los métodos estadísticos de interés que nos permitan dar respuesta a las preguntas de negocio o de investigación; finalmente, los resultados obtenidos deben ser comunicados a través de diversos medios. Este curso es un intento por crear competencias en los estudiantes que les permita a los mismos enfrentarse a un proceso de gestión de datos con el apoyo de R el cual, como se acaba de ilustrar, va desde la importación de datos hasta la entrega de resultados. Uno de las cosas más interesantes de R y, a su vez, de las más complejas de asimilar en su proceso de aprendizaje es que existen varios caminos -posibilidades- para obtener el mismo resultado. Dos estudiantes pueden llegar al mismo resultado por dos vías diferentes y, entre ellos, presentar dificultad para entender lo que el otro hizo. No obstante, existen unos fundamentos, reglas o bases del lenguaje que son universales y de las cuales se vale el lenguaje para construir el andamiaje hasta hoy existente. Estos fundamentos, desconocidos por buena parte de los usuarios de R, son centrales para un aprendizaje sostenible a lo largo del tiempo. Por lo anterior, este primer curso de R es un intento por enseñar a los estudiantes los principales pasos y fundamentos requeridos para adelantar un análisis de manera independiente a través del uso de este lenguaje. A lo largo del curso, además de su sentido orientado a la práctica y de un intento pedagógico en la presentación e ilustración de los diferentes componentes y conceptos, se irán presentando los fundamentos y las reglas que gobiernan este lenguaje de programación. ¡Bienvenidos! "],
["1-Instalar.html", "Capítulo 1 Instalar R y Rstudio", " Capítulo 1 Instalar R y Rstudio A continuación, se presentan los pasos requeridos para la instalación de R, Rstudio así como la personalización de este último si se considera pertinente por parte de los usuarios. La instalación de estos dos programas es requerida previo al inicio del presente curso. Para ello, primero se debe instalar en cada uno de nuestros equipos R y luego Rstudio. "],
["1-1-instalar-r.html", "1.1 Instalar R", " 1.1 Instalar R A continuación, se presentan los pasos para la instalación de R. Paso 1 El primer paso, como se ilustra en la Figura de abajo, consiste en buscar R en google. Para ello, en la barra de google se ingresa la siguiente palabra “R project”. Paso 2 El segundo lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción “Download R” Paso 3 En tercer lugar, como se ilustra en la Figura de abajo, se abre una ventana con las diferentes opciones disponibles para descargar R Paso 4 En cuarto lugar, como se ilustra en la Figura de abajo, se debe seleccinar R de acuerdo al sistema operativo disponible en nuestros computadores. La gran mayoría de nuestros PCs tienen instalado Windows. Paso 5 El quinto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción base. Paso 6 En sexto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción Download R 4.0.2 for Windows (32/64 bit) Paso 7 En septimo lugar, como se ilustra en la Figura de abajo, se debe dar sí en la ventana emergente. Esta ventana, según los esquemas de seguridad instalados en nuestros computadores, puede o no emerger. Si no emerge, pasa directamente al paso 8. Paso 8 En octavo lugar, como se ilustra en la Figura de abajo, se debe seleccionar la opción instalar y luego dar clic en Aceptar. Paso 9 En noveno lugar, como se ilustra en la Figura de abajo, se debe dar clic en Siguiente en la totalidad de pestañas que aparecen a continuación. Paso 10 En decimo lugar, como se ilustra en la Figura de abajo, se debe esperar a que termine la instalación de R. Este paso puede tardar algunos minutos. Paso 11 En onceavo lugar, como se ilustra en la Figura de abajo, una vez se ha instalado el programa, se debe dar clic en la opción “Finalizar”. Paso 12 En doceavo lugar, como se ilustra en la Figura de abajo, se debe verificar que R quedó instalado en nuestros equipos. Esto se puede hacer a través de la barra de opciones de programas. "],
["1-2-instalar-rstudio.html", "1.2 Instalar Rstudio", " 1.2 Instalar Rstudio Una vez hemos instalado R en nuestros computadores, el paso a seguir es instalar Rstudio. Para ello, procedemos a ejecutar los siguientes pasos. Paso 1 El primer paso, como se ilustra en la Figura de abajo, consiste en buscar Rstudio en google. Para ello, en la barra de google se ingresa la siguiente palabra “r studio”. Paso 2 En segundo lugar, como se ilustra en la Figura de abajo, se deve dar clic en la opción Download Rstudio - Rstudio Paso 3 En tercer lugar, como se ilustra en la Figura de abajo, en la parte baja de la ventana se debe dar clic en la opción *DOWNLOAD; la que está debajo de la opción Free. Paso 4 En cuarto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción DOWNLOAD RSTUDIO FOR WINDOWS. Paso 5 En quinto lugar, como se ilustra en la Figura de abajo, se debe dar sí en la ventana emergente. Esta ventana, según los esquemas de seguridad instalados en nuestros computadores, puede o no emerger. Si no emerge, pasa directamente al paso 6. Paso 6 En sexto lugar, como se ilustra en la Figura de abajo, en la ventana emergente dar clic en la opción Siguiente y de allí, en adelante, dar siguiente a todas las ventanas que aparezcan hasta que inicie la descarga del programa. Paso 7 En septimo lugar, como se ilustra en la Figura de abajo, una vez el software es descargado en nuestros equipos, se debe dar clic al archivo descargado e iniciar su proceso de instalación. El proceso de instalación de Rstudio puede tardar algunos minutos. Paso 8 En octavo lugar, como se ilustra en la Figura de abajo, una vez a finalizado el proceso de instalación, se debe dar clic en la opción Terminar. Paso 9 En noveno lugar, como se ilustra en la Figura de abajo, se debe verificar que Rstudio quedó instalado en nuestros equipos. Esto se puede hacer a través de la barra de opciones de programas. "],
["1-3-personalizar-rstudio.html", "1.3 Personalizar Rstudio", " 1.3 Personalizar Rstudio Una vez hemos instalado de manera correcta R y Rstudio, el último paso a seguir es el de la personalización de Rstudio de acuerdo a cada una de nuestras necesidades o preferencias (este paso es opcional). Para ello, iniciamos Rstudio desde nuestro equipos y una vez abra, vamos a la pestaña Tools y damos clic en la opción Global Options (ver figura de abajo). Paso 1 Paso 2 En la ventana emergente, como se ilustra en la figura de abajo y, entre otras opciones, podemos personalizar el tamaño de la letra a usar Rstudio así como el color de fondo del mismo. Yo, por ejemplo, uso el tamaño de letra asignado por defecto (11) y como color de fondo uso la opción Cobalt. "],
["2-Fund.html", "Capítulo 2 Fundamentos del lenguaje R", " Capítulo 2 Fundamentos del lenguaje R En esta sección, se presentan los fundamentos del lenguaje de programación R. Estos están constituidos por los principales tipos de datos existentes en R, las operaciones aritméticas, la creación de variables, las expresiones lógicas, las estructuras de datos, la indexación o creación de subconjuntos de datos en R así como las principales rutinas de programación que hacen parte de este lenguaje. "],
["2-1-introR.html", "2.1 Primeros pasos en R", " 2.1 Primeros pasos en R R, como los demás lenguajes de programación, se ejecuta a través de un conjunto de instrucciones que se alojan dentro de un documento llamado programa, script o código conformado por líneas de código y comentarios. Para que un scrip o código pueda ser entendido por nuestras computadoras, estos imponenen algunas reglas básicas. A lo largo de este libro se presentarán, con títulos en color rojo, las reglas básicas del lenguaje de programación R; estas, como toda regla, nunca deben ser violadas.1 La primera regla de R está relacionada con los comentarios. Es decir, la forma como se documenta un código o programa y que el contenido de estos no sean tenidos en cuenta a la hora de la ejecución/compilación de los mismos. Los comentarios son de suma importancia para entender/explicar el contenido o las acciones adelantadas dentro de un programa. Estos son de suma utilidad para nosotros mismos, al momento de olvidar los porqués del contenido que construimos en un código en el pasado o, para otra u otras personas, al momento de intendar comprender/entender el contenido de nuestros programas. Regla: Comentarios En R, los comentarios; es decir, las partes que nos permiten documentar un código se anteceden de la letra numeral #. Los comentarios, en el momento de ejecutar un código, no son tenidos en cuenta por nuestras computadoras. A continuación, se presenta un ejemplo de un comentario en R. # Este es un comentario en R R, como se mencionó al inicio de esta sección, se ejecuta a través de un programa o script el cual está confomado por un conjunto de instrucciones y comentarios que nos permiten obtener los resultados deseados. A continuación, se presenta un ejemplo de un script, programa o código en R.2 Ejemplo. Script, programa o código en R # Ejemplo de un script, programa o código en R. x &lt;- 1 # Esta es una línea de código y &lt;- 2 x + y # Esta es otra línea de código El programa de R que se acaba de presentar está conformado por tres líneas de código: la primera, conformada por una variable x, a la que se le asigna el valor 1; la segunda, conformada por una variable y, a la que se le asigna el valor 2 y, finalmente, la tercera línea de código, arroja el resultado de sumar los valores contenidos en la variables x e y. Cada una de las líneas de un programa, como se mencionó previamente se conoce como línea de código y solo puede existir una instrucción por línea de código. Esta condición deriva en la siguiente regla en R. Regla: Instrucciones por línea R solo permite una instrucción por cada una de las líneas que conforman un código o script. En consecuencia, si se ingresan dos o más instrucciones en una misma línea de un código, este genera un error. A continuación, se presentan dos ejemplos de programas en R. El primero con una instrucción por línea de código (programa correcto) y el segundo con más de una instrucción po línea de código (programa incorrecto). Al ejecutar el programa incorrecto, el que viola la regla de más de una instrucción por línea de código (el segundo), el programa retornará un error. Ejemplos. Programas correctos e incorrectos en R # Ejemplo 1. Código o script correcto (una instrucción por línea) x &lt;- 1 y &lt;- 2 x + y # Ejemplo 2. Código o script incorrecto (más de una instrucción por línea) x &lt;- 1 y &lt;- 2 x + y El lenguaje de programación R, a diferencia de otros lenguajes, diferencia entre letras mayúsculas y minúsculas (Case Sensitive). Este hecho, implica la siguiente regla en este lenguaje. Regla: Mayúsculas y Minúsculas - (Case Sensitive) R, a diferencia de otros lenguajes de programación, distingue/diferencia entre letras mayúsculas y minúsculas (Case Sensitive). Es decir, una letrá mayúscula es diferente a su contraparte en minúscula. Ejemplos. Letras mayúsculas y minúsculas A continuación, se presentan cuatro ejemplos en el que se refleja la importancia de diferenciar las letras mayúsculas y minúsculas en R. En el primero de ellos, el mismo programa expuesto con anterioridad, se presenta un programa con el uso de letras minúsculas. El segundo, el mismo programa con el uso de letras mayúsculas. El tercero, el mismo programa con una combinación correcta de letras mayúsculas y minúsculas. Finalmente, el ejemplo cuatro, presenta el mismo programa con una combinación/uso inorrecto de letras mayúsculas y minúsculas que implica un error en el mismo. En este último ejemplo, el valor 1 se asigna a la letra mayúscula X, el valor 2 a la letra mayúscula Y pero, la suma de los mismos -tercera línea de código-, se representa mediante las letras minúsculas x e y cuando se espera que allí se ubiquen sus contrapartes mayúsculas. # Ejemplo 1. Script con letras minúsculas. x &lt;- 1 y &lt;- 2 x + y # Ejemplo 2. Script con letras mayúsculas. x &lt;- 1 Y &lt;- 2 x + Y # Ejemplo 3. Scrip con letras mayúsculas y minúsculas. X &lt;- 1 y &lt;- 2 X + y # Ejemplo 4. Error. Mal uso de letras mayúsculas y minúsculas. X &lt;- 1 Y &lt;- 2 x + y A lo largo de los capítulos que conforman este documento se presentarán algunos casos en los cuales estas reglas pueden ser obviadas o ajustadas. Las reglas que permiten estas acciones pueden ser consideradas como reglas débiles.↩︎ En adelante, haremos uso de la palabra programa para hacer referencia a un script o código de R.↩︎ "],
["2-2-Tdatos.html", "2.2 Tipos de datos en R", " 2.2 Tipos de datos en R Esta sección contiene los principales tipos de datos utilizados en R. Aunque existen otros tipos de datos los cuales no serán objeto del presente documento, estos se caracterizan por conformar la base del lenguaje. 2.2.1 Tipos de datos en R En R existen 5 tipos de datos básicos: lógicos, numéricos, numéricos - enteros, cadena/caracter y complejos3. A continuación se presenta una breve descripción y se ejemplifican cada uno de estos tipos de datos. Lógicos Los tipos de datos lógicos, también conocidos como booleanos, representan en R falso o verdadero y se representan mediante las letras o palabras mayúsculas F o FALSE para el caso de falso y T o TRUE para el caso de verdadero. NOTA: En los ejemplos que se presentan a continuación y en muchos de los que se presentarán en adelante, el contenido de los mismos tiene dos componentes: el texto del programa el cual está acompañado de colores en su texto y el resultado u output que arroja R al ejecutar/compilar el programa el cual, además de presentarse en letras de color negro, está precedido de un doble numeral (##). A continuación se ejemplifican los resultados de compilar tipos de datos lógicos o booleanos en R. Ejemplo. Datos lógicos # Opciones para verdadero (T o TRUE) # Con T T ## [1] TRUE # Con TRUE TRUE ## [1] TRUE # Opciones para falso (F o FALSE) # Con F F ## [1] FALSE # Con FALSE FALSE ## [1] FALSE Auque es correcto y más corto el uso de las letras T o F para representar las condiciones de falso o verdadero en R, se recomienda siempre usar las versiones TRUE o FALSE por ser estas más consistentes. Numéricos Los tipos de datos numéricos, también conocidos como numéros, datos decimales o dobles, hacen referencia a aquellos números (positivos o negativos) que se caracterizan por estar conformados por una parte entera y una decimal.En R, el punto (.) es el encargado de separar la parte entera de la parte decimal de un número. Por ejemplo, 3.14, 30.48, 2.05, son representaciones de números en R. Cuando un número es muy grande o muy pequeño, por defecto, el programa los representa mediante notación científica haciendo uso de la letra (e). Por ejemplo, 1e-11 es la representación notación/científica4 del número real 0.00000000001. A continuación, se presentan algunos ejemplos en R de datos numéricos o decimales. Ejemplo. Datos numéricos/decimales # numéros reales convencionales 3 ## [1] 3 3.14 ## [1] 3.14 30.48 ## [1] 30.48 2.05 ## [1] 2.05 # numéros reales grandes - notación científica 1234567891011 ## [1] 1.234568e+12 # número reales pequeños - notación científica 0.00000000001 ## [1] 1e-11 Regla: Números por defecto en R En R, a menos que se diga lo contrario, todo número, por defecto, es considerado numérico. Enteros - numéricos Los tipos de datos enteros en R, también conocidos como números enteros, son aquellos que a diferencia de los numéricos, carecen de una parte decimal. Los número enteros en R están acompañados de la letra mayúscula (L). Por ejemplo, 3L representa el número entero 3 y -10L el número entero -10. Ejemplo. Datos enteros A continuación, se presentan algunos ejemplos de números enteros en R. # Enteros positivos 5L ## [1] 5 3L ## [1] 3 # Enteros negativos -20L ## [1] -20 -1L ## [1] -1 Cadena o caracter En R, los datos de tipo cadena o caracter hacen referencia a aquellos datos que contienen texto en su contenido. Los tipos de dato caracter o de texto en R se representan/encierran mediante comillas dobles \" o sencillas ’ pero núnca a través de una mezcla o combinación entre los dos tipos de comillas. “Hola mundo”, “Este es un dato de tipo texto”, ‘dato entre comillas sencillas’, “dato entre comillas dobles” son algunos ejemplos de datos de tipo cadena, texto o caracter en R. Ejemplo. Datos cadena/caracter A continuación, se presentan algunos ejemplos de datos de tipo cadena o caracter en R. Así mismo, el segundo de los ejemplos, presenta dos ejemplos que combinan comillas dobles y simples hecho que, como ya se mencionó, conducen a un error en R. # Ejemplo 1 # Con comillas dobles &quot;Hola&quot; ## [1] &quot;Hola&quot; &quot;Este es otro dato de tipo texto&quot; ## [1] &quot;Este es otro dato de tipo texto&quot; &quot;TRUE&quot; ## [1] &quot;TRUE&quot; # Con comillas sencillas &#39;dato entre comillas sencillas&#39; ## [1] &quot;dato entre comillas sencillas&quot; &#39;FALSE&#39; ## [1] &quot;FALSE&quot; &#39;2.35&#39; ## [1] &quot;2.35&quot; # Ejemplo 2 # Con comillas mezcladas (dobles y simples) &quot;Hola&#39; &#39;Hola mundo&quot; # Las anteriores dos líneas de código producen errores en R 2.2.2 Constantes integradas en R R, por defecto y de manera especial trae incluido un pequeño número de variables/palabras (5) que permiten la visualización de ciertos datos de tipo numérico o caracter de alto uso entre los usuarios, en especial, los de habla inglesa. A continuación, se presentan los cinco nombres especiales que trae incluido este software así como sus correspondientes significados. LETTERS: las 26 letras mayúsculas del alfabeto romano letters: las 26 letras minúsculas del alfabeto romano month.abb: abreviaturas de tres letras para los nombres de los meses en inglés month.name: los nombres en inglés de los meses del año pi: la relación entre la circunferencia de un círculo y su diámetro. También conocido como número pi. Ejemplo. Constantes integradas en R A continuación, se presenta el resultado de las constantes o palabras integradas y utilizadas por R. # Letras del abecedario en mayúsculas. LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # Letras del abecedario en minúsculas. letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; # Primeras tres letras de los nombres de los meses - en inglés. month.abb ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; # Nombre de los meses - en inglés. month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; # Número pi pi ## [1] 3.141593 En este documento no haremos referencia a los números complejos. Estos, de amplio uso y estudio en el contexto de las matemáticas, se caracterízan por tener una parte entera y una imaginaria↩︎ El número de decimales a partir del cual R representa a los números reales en notación científica se da por defecto y el mismo, si se considera necesario, puede ser modificado↩︎ "],
["2-3-Aritmet.html", "2.3 Operaciones aritméticas y variables en R", " 2.3 Operaciones aritméticas y variables en R En esta sección se presentan las principales operaciones aritméticas empleadas en R así como la forma de crear variables en este lenguaje de programación. 2.3.1 Operaciones aritméticas en R R, en sentido estricto, puede ser considerado como una calculadora avanzada. A través de él es posible implementar las operaciones simples de la aritmética (básicas y complementarias) así como algunas operaciones avanzadas que van desde la combinación de las operaciones simples (compuestas) hasta su uso para otro tipo de operaciones (funciones trigonométricas, operaciones logarítmicas, potenciación, uso de radicales, etc.). En este texto, dado su caracter introductorio, se presentan las operaciones aritméticas simples (básicas o complementarias) así como algunas operaciones compuestas derivadas de la aplicación/combinación de dos o más operaciones simples. Operaciones aritméticas simples: Las operaciones aritméticas básicas o simples empleadas por R son la suma (+), la resta (-), la multiplicación (*) y la división (/). Ejemplos. Operaciones aritméticas básicas A continuación, se presentan algunos ejemplos con las principales operaciones simples empleadas por R. # Suma 3.5 + 7.7 ## [1] 11.2 3L + 10L ## [1] 13 1 + 8 ## [1] 9 # Resta 7.7 - 3.7 ## [1] 4 3L - 10L ## [1] -7 8 - pi ## [1] 4.858407 # Multiplicación 7.71 * 3.73 ## [1] 28.7583 -3L * 10L ## [1] -30 1 * 8 ## [1] 8 # División 7.7 / 3.7 ## [1] 2.081081 12L / 4L ## [1] 3 -1 / 4 ## [1] -0.25 Operaciones aritméticas simples complementarias: Las operaciones aritméticas simples y complementarias empleadas por R son los exponentes (^), la división entera (%/%) y los módulos (%%). A continuación, se presenta una breve descripción de estos tres subtipos de operaciones simples complementarias. Exponentes: Consiste en elevar un número x a una potencia n. Es decir, multiplicar x por sí mismo tantas veces como se defina en n (ver siguiente fórmula). \\[\\begin{equation} x^n \\end{equation}\\] Por ejemplo, \\[\\begin{equation} 2^3 \\end{equation}\\] consiste en multiplicar el número 2 por sí mismo 3 veces; es decir, 2x2x2 cuyo resultado es igual a 8. Divisón Entera: La división entera de x%/%n devuelve el número máximo de veces que se encuentra un núemro n contenido dentro de un número x. Módulo: El módulo de una división x%%n devuelve el residuo o resto de la división entera de un número x por un número n. Ejemplos. Operaciones aritméticas complementarias A continuación, se presentan algunos ejemplos de operaciones aritméticas simples y complementarias en R. # Exponenciales 2^3 ## [1] 8 3^2 ## [1] 9 5^3 ## [1] 125 # Divisiones enteras 15%/%3 ## [1] 5 17%/%3 ## [1] 5 9%/%4 ## [1] 2 # Módulos 15%%3 ## [1] 0 17%%3 ## [1] 2 9%%4 ## [1] 1 Operaciones compuestas Una operación aritmética compuesta está conformada por la combinación de varias operaciones simples (sumas, restas, multiplicaciones, divisiones, exponentes, etc.). Ejemplos. Operaciones complejas A continuación, se presentan algunos ejemplos de operaciones aritméticas compuestas. 2 + 2 + 3*2 ## [1] 10 2*5 - 6/2 ## [1] 7 6/2*10/2 + 3 ## [1] 18 6/2*(2+1 + 2^3) ## [1] 33 Al observar detenidamente Los ejemplos de las operaciones aritméticas compuestas que se acaban de ilustrar, nos podemos dar cuenta que estas contienen sumas, restas, multiplicaciones y hacen uso de exponentes y paréntesis. Una pregunta que podría surgir de este hecho es ¿cuál es el orden en el que R calcula estas operaciones?. La respuesta a esta pregunta está contenida en una regla llamada de priorización o precedencia. Regla: Precedencia o priorización en operaciones aritméticas compuestas En una operación aritmética compuesta de R, los paréntesis se calculan primero, luego los exponentes, luego la división y multiplicación y, finalmente, la suma y la resta. Esta regla se conoce popularmente como PEMDAS5 En la siguiente ilustración se presenta un ejemplo de la importancia del conocimiento de la regla de priorización o precedencia en R. En esta ilustración las dos operaciones están compuestas de los mismos números, no obstante, los resultados obtenidos son diferentes (17 y 25). En la operación de la parte izquierda (Order by default), la regla PEMDAS indica que primero debemos realizar la multiplicación y luego la suma; en contraste, en la operación de la parte derecha (Using parentheses), la regla de precedencia nos dice que primero dedemos realizar las operaciones contenidas dentro de los paréntesis -la suma- y luego la multiplicación. Ilustración. Prioridad aritmética en R En el siguiente ejemplo se presentan los resultados obtenidos en R al desarrollar las dos operaciones contenidas en la anterior ilustración. Ejemplo. Ilustración de aplicación de regla de precedencia o priorización en operaciones aritméticas compuestas # por defecto 2 + 3*5 ## [1] 17 # usando paréntesis (2 + 3)*5 ## [1] 25 El conocimiento y uso de la regla de priorización o precencia PEMDAS tiene importantes implicaciones prácticas y técnicas las cuales han generado debate en la comunidad científica y se han convertido en una de las principales fuentes de error a la hora de enfrentarnos al desarrollo de operaciones artitméticas compuestas. El siguiente artículo, publicado en el diario el Espectador por el profesor Ignacio Mantilla, exrector de la Universidad Nacional de Colombia, muestra la importancia del tema el cual, como puede allí leerse, tiene implicaciones de alcance a nivel tecnológico. Invitamos al lector a explorar y analizar detenidamente el contenido de este artículo. Ver artículo directamente en: Ecuaciones de opinión Tipos de datos de expresiones numéricas El resultado de una operación aritmética (simple o compuesta) es un número. No obstante, como se acaba de presentar, los tipos de datos numéricos en R pueden ser de dos tipos: numéricos -en sentido estricto- o enteros. En este orden de ideas, una pregunta que surge al desarrollar una operación aritmética es: ¿cuál es el tipo de dato que resulta al implementar una operación aritmética en R? La respuesta a esta inquietud se presenta en la siguiente regla de este lenguaje. Regla: Tipos de datos resultantes de operaciones aritméticas En R, operaciones entre datos del mismo tipo, producen el mismo tipo de datos. En contraste, operaciones entre diferentes tipos de datos, producen el tipo de dato más elevado de acuerdo al siguiente ordenamiento (Numérico &gt; Entero &gt; Lógico) Al observar la segunda parte de la anterior regla llama la atención la inclusión de los tipos de datos lógicos o booleanos como un tipo de dato numérico en R. Pues bien, en este lenguaje de programación, el tipo de dato lógico FALSE es equivalente a 0 y el tipo de dato lógico TRUE es equivalente al valor 1. Este hecho, conlleva a la definición de la siguiente regla del lenguaje. Regla: Comportamiento numérico de los datos lógicos o booleanos En R, los tipos de datos booleanos (FALSE y TRUE), además de representar las condiciones de falso y verdadero, en términos numéricos, presentan las siguiente equivalencias: TRUE = 1 y FALSE = 0 Como consecuencia de la anterior regla, en R y aunque no se recomienda su uso, una operación aritmética (simple o compuesta), puede incluir datos de tipo booleano y el tipo de dato resultante sigue la regla del dato más elevado según el criterio antes presentado (Numérico &gt; Entero &gt; Lógico). A continuación, se presentan algunos ejemplos de operaciones aritméticas que involucran diversos tipos de datos. Invitamos al lector, de acuerdo a las dos reglas antes expuestas, a responder ¿cuál es el tipo de dato que resulta al desarrollar dichas operaciones? Ejemplo. Tipos de datos resultantes de expresiones numéricas 1L + 2L + 2L ## [1] 5 3L + 2 ## [1] 5 3L + 3*3 + 5/2 ## [1] 14.5 FALSE + 4 ## [1] 4 TRUE + FALSE ## [1] 1 FALSE + TRUE ## [1] 1 FALSE + FALSE ## [1] 0 TRUE + TRUE ## [1] 2 2.3.2 Variables en R Una de las funcionalidades y de las partes más importantes en el aprendizaje de R es la creación de variables. Una variable en R es un espacio reservado en memoria el cual está compuesto por un nombre y un contenido definido o asignado a este nombre. A continuación, se presenta un ejemplo de una variable en R. # ejemplo de una variable en R x &lt;- 5L En el ejemplo, hemos creado una variable llamada x y a esta se le ha asignado el valor/número entero 5. En R, el simbolo de asignación6 es &lt;-. El uso de variables en R es altamente frecuente pues a través de estas podemos reservar contenidos de nuestros procesos que serán usados en fases posteriores de nuestros análisis. Para mostrar el contenido de una variable en R, además de definir la variable, se debe adicionar una nueva línea de código a nuestros programas con el nombre de la variable o las variables cuyo contenido deseamos conocer. Por ejemplo, si deseamos conocer el contenido de la variable x definida en el ejemplo anterior, debemos adicionar una nueva línea de código con dicho nombre como se presenta a continuación. Ejemplo. Visualización del contenido de una variable en R # Visualización del contenido de una variable en R x &lt;- 5L x ## [1] 5 A continuación, se presentan otros ejemplos de visualización de variables en R. Ejemplo. Visualización del contenido de otras variables en R # Visualización del contenido de variables en R # Ejemplo 1 y &lt;- 5 + 3.2 y ## [1] 8.2 # Ejemplo 2 y &lt;- 1 + pi y ## [1] 4.141593 # Ejemplo 3 z &lt;- 5 + 3*(1 + 2^2) z ## [1] 20 # Ejemplo 4 x &lt;- 3 + 5 y &lt;- 4 x + y ## [1] 12 Una vez que tenemos claro el objetivo con la creación de variables en R, el paso a seguir consiste en presentar algunas recomendaciones y restricciones a la hora de crear variables en R. Para ello, haremos uso de la siguiente regla en la que se presentan los criterios con las recomendaciones y las restricciones que deben ser tenidas en cuenta a la hora de crear nombres asociados a variables en R. Regla: Nombres de variables en R (recomendaciones y restricciones) En R, para nombrar una variable, existen 5 criterios o reglas que deben ser tenidas en cuenta: Los nombres de las variables consisten en letras (mayúsculas o minúsculas), números, un punto (.) o un guión bajo (_). Podemos comenzar un nombre de variable con una letra o un punto, pero los puntos no pueden ser seguidos por un número. No podemos comenzar un nombre de variable con un número. No se permiten caracteres especiales, por ejemplo, espacios, símbolos de operadores, paréntesis. No podemos usar una palabra clave ya utilizada e interpretada por R como un nombre de variable (Palabras Reservadas). Por ejemplo, if, else, for, while, break, next, repeat, NA, NULL y NaN El contenido de los criterios presentados en la anterior regla se ilustra, con algunos ejemplos de nombres válidos y no válidos para variables en R, a través de la figura que se presenta a continuación. Ilustración. Nombres correctos e incorrectos para nombrar variables en R Además de los criterios presentados en la regla para la asignación de nombres de variables en R, se recomienda que el nombre que se asigne a estas se corresponda con el contenido de las mismas. Por ejemplo, si en una variable se aloja la edad de una persona, sería conveniente que esta variable se llame o nombre como edad. De la misma manera, aunque R permite que los nombres de las variable sean grandes (alta cantidad de caractéres), se recomienda que los mismos no sean demasiado largos. Finalmente, aunque no se recomienda, es normal encontrar en la práctica interesados en nombrar variables con nombres compuestos separados por espacios. Si este es el caso, los nombres compuestos de estas variables deben estar contenidos dentro de comillas a la izquierda. A continuación, se presentan tres ejemplos con nombres de variables compuestos. # Ejemplo 1 `Nombre variable` &lt;- 4.5 # Ejemplo 2 `Nombre compuesto` &lt;- 0 # Ejemplo 3 `Este es otro nombre para mi variable` &lt;- -10L 2.3.3 Identificando el tipo de variables El trabajo con variables en R, como ya se mencionó, es altamente frecuente hecho que conlleva a que en algunos casos olvidemos el tipo de elementos que estas contienen. Para ello, en R existe una función7 llamada class() que nos permite conocer la tipología de los elementos que hacen parte de una variable. A continuación, a modo de ejemplo, se definen 5 variables, se expone su contenido y se indaga, haciendo uso de la función class, por los tipos de datos que estas variables contienen. Ejemplo. Tipos de variables en R # Ejemplo 1 var_1 &lt;- TRUE var_1 ## [1] TRUE class(var_1) ## [1] &quot;logical&quot; # Ejemplo 2 var_2 &lt;- 2L var_2 ## [1] 2 class(var_2) ## [1] &quot;integer&quot; # Ejemplo 3 var_3 &lt;- 0.14 var_3 ## [1] 0.14 class(var_3) ## [1] &quot;numeric&quot; # Ejemplo 4 var_4 &lt;- var_1 + var_2 + var_3 var_4 ## [1] 3.14 class(var_4) ## [1] &quot;numeric&quot; # Ejemplo 4 var_5 &lt;- LETTERS var_5 ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; class(var_5) ## [1] &quot;character&quot; El tipo de dato contenido en la variable del ejemplo 1 (var_1) es de tipo lógico, el de la variable 2 (var_2) es de tipo entero, el de las variable 3 y 4 (var_3 y var_4) es de tipo numérico y, finalmente, el tipo de dato contenido en la variable del ejemplo 5 (var_5) es de tipo cadena o caracter. La sigla PEMDAS se derivada del inglés para Parentheses (Paréntesis), Exponents (Exponentes), Multiplication-Division (Multiplicación-División), Addition-Subtraction (Suma y resta).↩︎ También pueden ser empleados, como símbolos de asignación, las expresiones = o -&gt;. Para el último de estos casos las partes contenidas dentro de una variable deben ser invertidas (5 -&gt; x). Aunque las tres formas de asignación (&lt;- , = , -&gt;) son válidas, se recomienda el uso de la primera (&lt;-) para evitar confusiones, en el caso de la igualdad, cuando este sea usado en el contexto de las funciones y en, en el otro caso (-&gt;), por ser contraintuitivo al pensamiento humano↩︎ Esta es la primera vez que hacemos uso, dentro de este documento, de una función. R, en sentido estricto, es un lenguaje de tipo funcional; es decir, altamente/totalmente soportado en funciones. Más adelante se contará con una sección dedicada al uso y construcción de funciones en R↩︎ "],
["2-4-Elogicas.html", "2.4 Expresiones lógicas en R", " 2.4 Expresiones lógicas en R Una expresión lógica en R está compúesta por dos componentes mediados por operadores que pueden ser de dos tipos: relacionales o lógicos. A continuación, se presenta un ejemplo con una operación lógica en R. Esta, como se mencionó, está compuesto de dos partes (izquierda y derecha) y es mediada por un operador lógico (&gt;=). En específico, la expresión lógica del siguiente ejemplo indaga si el número 5 (parte izquierda) es mayor o igual &gt;= (operador relacional) que el número 4 (parte derecha). # Ejemplo de una expresión lógica 5 &gt;= 4 El resultado de una operación lógica es un dato de tipo booleano (TRUE o FALSE)8. Este hecho, implica la siguiente regla aplicable a este lenguaje de programación. Regla: Resultado de expresiones lógicas En R, el resultado de una operación lógica, es un dato o literal de tipo booleano (TRUE o FALSE) 2.4.1 Operadores Relacionales Como se mencionó previamente, en R existen dos tipos de operadores asociados a las expresiones lógicas: relacionales y lógicos. Los operadores relacionales disponibles en R son: Menor que ( &lt; ) Mayor que ( &gt; ) Menor o igual que ( &lt;= ) Mayor o igual que ( &gt;= ) Igual a ( == ) No es igual a (diferente) ( != ) A continuación, se presentan algunos ejemplos de expresiones lógicas en R haciendo uso de operadores relacionales con sus respectivos resultados (TRUE o FALSE). Ejemplo. Expresiones lógicas con operadores relacionales # Ejemplo 1 1 &lt; 3 ## [1] TRUE # Ejemplo 2 3 &gt; 3 ## [1] FALSE # Ejemplo 3 4 &lt;= 4 ## [1] TRUE # Ejemplo 4 3 &gt;= 2 ## [1] TRUE # Ejemplo 5 3 == 3 ## [1] TRUE # Ejemplo 6 TRUE == FALSE ## [1] FALSE # Ejemplo 7 TRUE == 1 ## [1] TRUE # Ejemplo 8 FALSE == 0 ## [1] TRUE # Ejemplo 9 3 != 3 ## [1] FALSE # Ejemplo 10 FALSE != 0 ## [1] FALSE # Ejemplo 11 &quot;Uno&quot; != &quot;1&quot; ## [1] TRUE # Ejemplo 12 &quot;Uno&quot; == &quot;Uno&quot; ## [1] TRUE Operaciones lógicas con operaciones aritméticas: Una expresión lógica, además de operadores relacionales, puede involucrar operaciones aritméticas simples, complementarias o compuestas. El ejemplo, que se presenta a continuación, ilustra una expresión lógica que involucra operaciones ariméticas compuestas. Ejemplo. Expresiones lógicas con operadores relacionales y operaciones ariméticas 12.10 - 10.50 &lt; 24.90 * 21.15 ## [1] TRUE Una pregunta que surge, al momento de disponer de una operación lógica que involucra operaciones arirméticas y lógicas es qué evalúa R primero, ¿la operación aritmética o la expresión lógica? La respuesta a esta inquietud conduce a la siguiente regla del lenguaje. Regla: Precedencia en expresiones lógicas En R, al evaluar una expresión lógica que hace uso de operadores relacionales y operaciones aritméticas, primero se evalúan las expresiones aritméticas y luego las expresiones lógicas Operaciones lógicas haciendo uso de variables: El resultado de las operaciones aritméticas, así como de las expresiones lógicas, pueden ser almacenados a través del uso de variables. Es decir, en lugar de evaluar de manera directa una expresión lógica y sus componentes, estos pueden ser evaluados previamente a través del uso de variables. A continuación, se presentan 2 ejemplos de expresiones lógicas en las que se hace uso de variables. Ejemplo. Expresiones lógicas con operadores relacionales y variables # Ejemplo 1 Var_1 &lt;- 12.10 - 10.50 Var_2 &lt;- 24.90 - 21.15 Var_1 &lt; Var_2 ## [1] TRUE # Ejemplo 2 Var_3 &lt;- 12.10 * 12L Var_4&lt;- 4.99 * 24L Var_5 &lt;- Var_3 == Var_4 Var_5 ## [1] FALSE En el ejemplo 1, se crean las variables Var_1 y Var_2 que contienen el resultado de aplicar dos operaciones aritméticas compuestas y, en la tercera línea del código (Var_1 &lt; Var_2), se evalúa la expresión lógica propuesta entre estas dos variables (Var_1 &lt; Var_2). En el ejemplo 2, las variables Var_3 y Var_4 contienen los resultados de dos operaciones aritméticas simples y la variable Var_5 el resultado de la operación lógica definida entre estas dos variables (Var_3 == Var_4). En este ejemplo, la última línea del código (la 4) nos permite visualizar el resultado de la operación lógica implementada a través del uso de variables. 12.10 * 12L == 4.99 * 24L ## [1] FALSE 2.4.2 Operadores Lógicos Los operadores lógicos en R permiten evaluar la condiciones de verdad o de falsedad9 al comparar los resultados entre dos operaciones lógicas relacionales. Los operadores lógicos disponibles en R son: Y lógico ( &amp; ) O lógico ( | ) No lógico ( ! ) Los resultados obtenidos a la hora de la aplicación de los tres operadores lógicos disponibles en R se presentan en el gráfico que se dispone a continuación. El resultado de una operación lógica que involucra el operador lógico &amp; (Y) solamente será cierta (TRUE) cuando las dos condiciones evaluadas sean ciertas. El resultado de una operación lógica que involucra el operador lógico | (O) solamente será falsa (FALSE) cuando las dos condiciones evaluadas sean falsas y, finalmente, el operador de negación (NO) cambia el resultado obtenido (TRUE por FALSE y viceversa). Ilustración Resultado operadores lógicos A continuación, se presnetan los resultados en R de los operadores lógicos expuestos en la anterior imagen. Ejemplo. Resultados expresiones lógicas con operadores lógicos # Con el operador lógico &amp; TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE FALSE &amp; TRUE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE # Con el operador lógico | TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE # Con el operador lógico de negación !TRUE ## [1] FALSE !FALSE ## [1] TRUE 2.4.3 Combinando operadores En buena parte de esta sección hemos explorado las posibilidades que nos ofrece R para construir operaciones aritméticas simples o compuestas, disponer los resultados obtenidos dentro de variables así como crear expresiones de tipo lógico las cuales pueden estar asociadas a operadores relacionales o lógicos. Para finalizar esta sección, exploraremos la forma como R evalúa operaciones lógicas que hacen uso de los múltiples conceptos vistos hasta ahora. Para ello, se presenta a modo de ejemplo, la siguiente expresión lógica. # Ejemplo de una expresión lógica compleja (40/2^3) + 2 &gt;= 7 | 5*5 - 5 &lt; 20 Al explorar el contenido de la anterior expresión lógica podemos observar que esta contiene operaciones aritméticas compuestas conformadas por exponentes, sumas, restas, divisiones, multiplicaciones y paréntesis. Así mismo, el ejemplo hace uso de expresiones lógicas asociadas a operadores relacionales y lógicos. La pregunta que surje ahora es: ¿cuál es el resultado de esta operación y cómo R procede para su desarrollo o evaluación? Para dara respuesta a ello, se presenta la siguiente regla del lenguaje la cual puede ser considerada de alcance general ya que incluye otras reglas presentadas hasta ahora. Regla: Precedencia o priorización general en R En R, teniendo en cuenta los operadores vistos hasta ahora y que conforman las operaciones aritméticas y las expresiones lógicas, la regla de priorización general que gobierna la evaluación de dichas expresiones es: Paréntesis Exponentes División y multiplicación Adición y sustracción Operadores relacionales Operadores logicos Es decir, en el ejemplo expuesto anteriormente, en el proceso de evaluación/compilación, el lenguaje primero realiza las operaciones que están dentro de los paréntesis, paso seguido calcula las multiplicaciones, luego las sumas y las restas y, finalmente, evalúa las expresiones lógicas asociadas a operadores relacionales para culminar con la evaluación resultante que involucra a los operadores de tipo lógico. A continuación, se presenta el resultado en R al evaluar la expresión lógica de nuestro ejemplo así como un ejemplo complementario a este. Ejemplo. Resultados expresiones lógicas compuestas # Ejemplo 1 (40/2^3) + 2 &gt;= 7 | 5*5 - 5 &lt; 20 ## [1] TRUE # Ejemplo 2 (40/2^3) + 2 &gt;= 7 &amp; 5*5 - 5 &lt; 20 ## [1] FALSE En el ejemplo de la expresión lógica 5 &gt;= 4, el resultado es igual a TRUE dado que 5 es mayor o igual que 4↩︎ Estos operadores hacen parte de lo que en lógica matemática se conoce como tablas de verdad. En R, en el contexto de los operadores se hace uso de las tablas de verdad asociadas a la conjunción (∧), la disyunción (∨) y la negación (¬)↩︎ "]
]
