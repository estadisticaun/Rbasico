[
["index.html", "Un Primer Curso de R Portada", " Un Primer Curso de R Alberto Rodríguez Rodríguez Última actualización: 01 de septiembre de 2020 Portada "],
["Presenta.html", "Presentación", " Presentación Este libro, de naturaleza web, presenta los contenidos que pueden ser abordados en un primer curso orientado al aprendizaje de R. Este lenguaje, como muchos softwares estadísticos o de otra naturaleza, está conformado por una inmensa cantidad de funcionalidades que complejiza su aprendizaje y, desde luego, su enseñanza. Es tal el crecimiento que ha alcanzado R durante los últimos años que hoy el reto, para quienes trabajamos con él, no es estar actualizados sino lo menos desactualizados posibles; nunca, así nos lo propongamos, alcanzaremos a conocer y dominar todas las posibilidades y funcionalidades que R ofrece en la actualidad. El contenido del libro se divide en 5 grandes componentes derivados de un enfóque de aprendizaje desde lo que hoy se conoce, en el contexto de la gestión moderna de datos, como Ciencia de Datos: fundamentos del lenguaje R, limpieza y transformación de datos en R, visualización en R, modelamiento en R y comunicación de resultados en R. Sin importar si se labora en una empresa o se trabaja en el ámbito académico, estos 5 pasos, con mayor o menor medida, deben ser empleados en el proceso de generación de conocimiento a partir de los datos disponibles. Los datos se deben capturar y los mismos son de diversa naturaleza; una vez capturados deben ser importados y trasformados según nuestros intereses; una vez trasformados, para prósitos descriptivos o análiticos, estos deben ser representados de manera gráfica o tabular; agotadas las fases de transformación y visualización, se deben implementar los métodos estadísticos de interés que nos permitan dar respuesta a las preguntas de negocio o de investigación; finalmente, los resultados obtenidos deben ser comunicados a través de diversos medios. Este curso es un intento por crear competencias en los estudiantes que les permita a los mismos enfrentarse a un proceso de gestión de datos con el apoyo de R el cual, como se acaba de ilustrar, va desde la importación de datos hasta la entrega de resultados. Uno de las cosas más interesantes de R y, a su vez, de las más complejas de asimilar en su proceso de aprendizaje es que existen varios caminos -posibilidades- para obtener el mismo resultado. Dos estudiantes pueden llegar al mismo resultado por dos vías diferentes y, entre ellos, presentar dificultad para entender lo que el otro hizo. No obstante, existen unos fundamentos, reglas o bases del lenguaje que son universales y de las cuales se vale el lenguaje para construir el andamiaje hasta hoy existente. Estos fundamentos, desconocidos por buena parte de los usuarios de R, son centrales para un aprendizaje sostenible a lo largo del tiempo. Por lo anterior, este primer curso de R es un intento por enseñar a los estudiantes los principales pasos y fundamentos requeridos para adelantar un análisis de manera independiente a través del uso de este lenguaje. A lo largo del curso, además de su sentido orientado a la práctica y de un intento pedagógico en la presentación e ilustración de los diferentes componentes y conceptos, se irán presentando los fundamentos y las reglas que gobiernan este lenguaje de programación. ¡Bienvenidos! "],
["1-Instalar.html", "Capítulo 1 Instalar R y Rstudio", " Capítulo 1 Instalar R y Rstudio A continuación, se presentan los pasos requeridos para la instalación de R, Rstudio así como la personalización de este último si se considera pertinente por parte de los usuarios. La instalación de estos dos programas es requerida previo al inicio del presente curso. Para ello, primero se debe instalar en cada uno de nuestros equipos R y luego Rstudio. "],
["1-1-instalar-r.html", "1.1 Instalar R", " 1.1 Instalar R A continuación, se presentan los pasos para la instalación de R. Paso 1 El primer paso, como se ilustra en la Figura de abajo, consiste en buscar R en google. Para ello, en la barra de google se ingresa la siguiente palabra “R project”. Paso 2 El segundo lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción “Download R” Paso 3 En tercer lugar, como se ilustra en la Figura de abajo, se abre una ventana con las diferentes opciones disponibles para descargar R Paso 4 En cuarto lugar, como se ilustra en la Figura de abajo, se debe seleccinar R de acuerdo al sistema operativo disponible en nuestros computadores. La gran mayoría de nuestros PCs tienen instalado Windows. Paso 5 El quinto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción base. Paso 6 En sexto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción Download R 4.0.2 for Windows (32/64 bit) Paso 7 En septimo lugar, como se ilustra en la Figura de abajo, se debe dar sí en la ventana emergente. Esta ventana, según los esquemas de seguridad instalados en nuestros computadores, puede o no emerger. Si no emerge, pasa directamente al paso 8. Paso 8 En octavo lugar, como se ilustra en la Figura de abajo, se debe seleccionar la opción instalar y luego dar clic en Aceptar. Paso 9 En noveno lugar, como se ilustra en la Figura de abajo, se debe dar clic en Siguiente en la totalidad de pestañas que aparecen a continuación. Paso 10 En decimo lugar, como se ilustra en la Figura de abajo, se debe esperar a que termine la instalación de R. Este paso puede tardar algunos minutos. Paso 11 En onceavo lugar, como se ilustra en la Figura de abajo, una vez se ha instalado el programa, se debe dar clic en la opción “Finalizar”. Paso 12 En doceavo lugar, como se ilustra en la Figura de abajo, se debe verificar que R quedó instalado en nuestros equipos. Esto se puede hacer a través de la barra de opciones de programas. "],
["1-2-instalar-rstudio.html", "1.2 Instalar Rstudio", " 1.2 Instalar Rstudio Una vez hemos instalado R en nuestros computadores, el paso a seguir es instalar Rstudio. Para ello, procedemos a ejecutar los siguientes pasos. Paso 1 El primer paso, como se ilustra en la Figura de abajo, consiste en buscar Rstudio en google. Para ello, en la barra de google se ingresa la siguiente palabra “r studio”. Paso 2 En segundo lugar, como se ilustra en la Figura de abajo, se deve dar clic en la opción Download Rstudio - Rstudio Paso 3 En tercer lugar, como se ilustra en la Figura de abajo, en la parte baja de la ventana se debe dar clic en la opción *DOWNLOAD; la que está debajo de la opción Free. Paso 4 En cuarto lugar, como se ilustra en la Figura de abajo, se debe dar clic en la opción DOWNLOAD RSTUDIO FOR WINDOWS. Paso 5 En quinto lugar, como se ilustra en la Figura de abajo, se debe dar sí en la ventana emergente. Esta ventana, según los esquemas de seguridad instalados en nuestros computadores, puede o no emerger. Si no emerge, pasa directamente al paso 6. Paso 6 En sexto lugar, como se ilustra en la Figura de abajo, en la ventana emergente dar clic en la opción Siguiente y de allí, en adelante, dar siguiente a todas las ventanas que aparezcan hasta que inicie la descarga del programa. Paso 7 En septimo lugar, como se ilustra en la Figura de abajo, una vez el software es descargado en nuestros equipos, se debe dar clic al archivo descargado e iniciar su proceso de instalación. El proceso de instalación de Rstudio puede tardar algunos minutos. Paso 8 En octavo lugar, como se ilustra en la Figura de abajo, una vez a finalizado el proceso de instalación, se debe dar clic en la opción Terminar. Paso 9 En noveno lugar, como se ilustra en la Figura de abajo, se debe verificar que Rstudio quedó instalado en nuestros equipos. Esto se puede hacer a través de la barra de opciones de programas. "],
["1-3-personalizar-rstudio.html", "1.3 Personalizar Rstudio", " 1.3 Personalizar Rstudio Una vez hemos instalado de manera correcta R y Rstudio, el último paso a seguir es el de la personalización de Rstudio de acuerdo a cada una de nuestras necesidades o preferencias (este paso es opcional). Para ello, iniciamos Rstudio desde nuestro equipos y una vez abra, vamos a la pestaña Tools y damos clic en la opción Global Options (ver figura de abajo). Paso 1 Paso 2 En la ventana emergente, como se ilustra en la figura de abajo y, entre otras opciones, podemos personalizar el tamaño de la letra a usar Rstudio así como el color de fondo del mismo. Yo, por ejemplo, uso el tamaño de letra asignado por defecto (11) y como color de fondo uso la opción Cobalt. "],
["2-Fund.html", "Capítulo 2 Fundamentos del lenguaje R", " Capítulo 2 Fundamentos del lenguaje R En esta sección, se presentan los fundamentos del lenguaje de programación R. Estos están constituidos por los principales tipos de datos existentes en R, las operaciones aritméticas, la creación de variables, las expresiones lógicas, las estructuras de datos, la indexación o creación de subconjuntos de datos en R así como las principales rutinas de programación que hacen parte de este lenguaje. "],
["2-1-introR.html", "2.1 Primeros pasos", " 2.1 Primeros pasos R, como los demás lenguajes de programación, se ejecuta a través de un conjunto de instrucciones que se alojan dentro de un documento llamado programa, script o código conformado por líneas de código y comentarios. Para que un scrip o código pueda ser entendido por nuestras computadoras, estos imponenen algunas reglas básicas. A lo largo de este libro se presentarán, con títulos en color rojo, las reglas básicas del lenguaje de programación R; estas, como toda regla, nunca deben ser violadas.1 La primera regla de R está relacionada con los comentarios. Es decir, la forma como se documenta un código o programa y que el contenido de estos no sean tenidos en cuenta a la hora de la ejecución/compilación de los mismos. Los comentarios son de suma importancia para entender/explicar el contenido o las acciones adelantadas dentro de un programa. Estos son de suma utilidad para nosotros mismos, al momento de olvidar los porqués del contenido que construimos en un código en el pasado o, para otra u otras personas, al momento de intendar comprender/entender el contenido de nuestros programas. Regla: Comentarios En R, los comentarios; es decir, las partes que nos permiten documentar un código se anteceden de la letra numeral #. Los comentarios, en el momento de ejecutar un código, no son tenidos en cuenta por nuestras computadoras. A continuación, se presenta un ejemplo de un comentario en R. # Este es un comentario en R R, como se mencionó al inicio de esta sección, se ejecuta a través de un programa o script el cual está confomado por un conjunto de instrucciones y comentarios que nos permiten obtener los resultados deseados. A continuación, se presenta un ejemplo de un script, programa o código en R.2 Ejemplo. Script, programa o código en R # Ejemplo de un script, programa o código en R. x &lt;- 1 # Esta es una línea de código y &lt;- 2 x + y # Esta es otra línea de código El programa de R que se acaba de presentar está conformado por tres líneas de código: la primera, conformada por una variable x, a la que se le asigna el valor 1; la segunda, conformada por una variable y, a la que se le asigna el valor 2 y, finalmente, la tercera línea de código, arroja el resultado de sumar los valores contenidos en la variables x e y. Cada una de las líneas de un programa, como se mencionó previamente se conoce como línea de código y solo puede existir una instrucción por línea de código. Esta condición deriva en la siguiente regla en R. Regla: Instrucciones por línea R solo permite una instrucción por cada una de las líneas que conforman un código o script. En consecuencia, si se ingresan dos o más instrucciones en una misma línea de un código, este genera un error. A continuación, se presentan dos ejemplos de programas en R. El primero con una instrucción por línea de código (programa correcto) y el segundo con más de una instrucción po línea de código (programa incorrecto). Al ejecutar el programa incorrecto, el que viola la regla de más de una instrucción por línea de código (el segundo), el programa retornará un error. Ejemplos. Programas correctos e incorrectos en R # Ejemplo 1. Código o script correcto (una instrucción por línea) x &lt;- 1 y &lt;- 2 x + y # Ejemplo 2. Código o script incorrecto (más de una instrucción por línea) x &lt;- 1 y &lt;- 2 x + y El lenguaje de programación R, a diferencia de otros lenguajes, diferencia entre letras mayúsculas y minúsculas (Case Sensitive). Este hecho, implica la siguiente regla en este lenguaje. Regla: Mayúsculas y Minúsculas - (Case Sensitive) R, a diferencia de otros lenguajes de programación, distingue/diferencia entre letras mayúsculas y minúsculas (Case Sensitive). Es decir, una letrá mayúscula es diferente a su contraparte en minúscula. Ejemplos. Letras mayúsculas y minúsculas A continuación, se presentan cuatro ejemplos en el que se refleja la importancia de diferenciar las letras mayúsculas y minúsculas en R. En el primero de ellos, el mismo programa expuesto con anterioridad, se presenta un programa con el uso de letras minúsculas. El segundo, el mismo programa con el uso de letras mayúsculas. El tercero, el mismo programa con una combinación correcta de letras mayúsculas y minúsculas. Finalmente, el ejemplo cuatro, presenta el mismo programa con una combinación/uso inorrecto de letras mayúsculas y minúsculas que implica un error en el mismo. En este último ejemplo, el valor 1 se asigna a la letra mayúscula X, el valor 2 a la letra mayúscula Y pero, la suma de los mismos -tercera línea de código-, se representa mediante las letras minúsculas x e y cuando se espera que allí se ubiquen sus contrapartes mayúsculas. # Ejemplo 1. Script con letras minúsculas. x &lt;- 1 y &lt;- 2 x + y # Ejemplo 2. Script con letras mayúsculas. x &lt;- 1 Y &lt;- 2 x + Y # Ejemplo 3. Scrip con letras mayúsculas y minúsculas. X &lt;- 1 y &lt;- 2 X + y # Ejemplo 4. Error. Mal uso de letras mayúsculas y minúsculas. X &lt;- 1 Y &lt;- 2 x + y A lo largo de los capítulos que conforman este documento se presentarán algunos casos en los cuales estas reglas pueden ser obviadas o ajustadas. Las reglas que permiten estas acciones pueden ser consideradas como reglas débiles.↩︎ En adelante, haremos uso de la palabra programa para hacer referencia a un script o código de R.↩︎ "],
["2-2-Tdatos.html", "2.2 Tipos de datos", " 2.2 Tipos de datos Esta sección contiene los principales tipos de datos utilizados en R. Aunque existen otros tipos de datos los cuales no serán objeto del presente documento, estos se caracterizan por conformar la base del lenguaje. 2.2.1 Tipos de datos en R En R existen 5 tipos de datos básicos: lógicos, numéricos, numéricos - enteros, cadena/caracter y complejos3. A continuación se presenta una breve descripción y se ejemplifican cada uno de estos tipos de datos. Lógicos Los tipos de datos lógicos, también conocidos como booleanos, representan en R falso o verdadero y se representan mediante las letras o palabras mayúsculas F o FALSE para el caso de falso y T o TRUE para el caso de verdadero. NOTA: En los ejemplos que se presentan a continuación y en muchos de los que se presentarán en adelante, el contenido de los mismos tiene dos componentes: el texto del programa el cual está acompañado de colores en su texto y el resultado u output que arroja R al ejecutar/compilar el programa el cual, además de presentarse en letras de color negro, está precedido de un doble numeral (##). A continuación se ejemplifican los resultados de compilar tipos de datos lógicos o booleanos en R. Ejemplo. Datos lógicos # Opciones para verdadero (T o TRUE) # Con T T ## [1] TRUE # Con TRUE TRUE ## [1] TRUE # Opciones para falso (F o FALSE) # Con F F ## [1] FALSE # Con FALSE FALSE ## [1] FALSE Auque es correcto y más corto el uso de las letras T o F para representar las condiciones de falso o verdadero en R, se recomienda siempre usar las versiones TRUE o FALSE por ser estas más consistentes. Numéricos Los tipos de datos numéricos, también conocidos como numéros, datos decimales o dobles, hacen referencia a aquellos números (positivos o negativos) que se caracterizan por estar conformados por una parte entera y una decimal.En R, el punto (.) es el encargado de separar la parte entera de la parte decimal de un número. Por ejemplo, 3.14, 30.48, 2.05, son representaciones de números en R. Cuando un número es muy grande o muy pequeño, por defecto, el programa los representa mediante notación científica haciendo uso de la letra (e). Por ejemplo, 1e-11 es la representación notación/científica4 del número real 0.00000000001. A continuación, se presentan algunos ejemplos en R de datos numéricos o decimales. Ejemplo. Datos numéricos/decimales # numéros reales convencionales 3 ## [1] 3 3.14 ## [1] 3.14 30.48 ## [1] 30.48 2.05 ## [1] 2.05 # numéros reales grandes - notación científica 1234567891011 ## [1] 1.234568e+12 # número reales pequeños - notación científica 0.00000000001 ## [1] 1e-11 Regla: Números por defecto en R En R, a menos que se diga lo contrario, todo número, por defecto, es considerado numérico. Enteros - numéricos Los tipos de datos enteros en R, también conocidos como números enteros, son aquellos que a diferencia de los numéricos, carecen de una parte decimal. Los número enteros en R están acompañados de la letra mayúscula (L). Por ejemplo, 3L representa el número entero 3 y -10L el número entero -10. Ejemplo. Datos enteros A continuación, se presentan algunos ejemplos de números enteros en R. # Enteros positivos 5L ## [1] 5 3L ## [1] 3 # Enteros negativos -20L ## [1] -20 -1L ## [1] -1 Cadena o caracter En R, los datos de tipo cadena o caracter hacen referencia a aquellos datos que contienen texto en su contenido. Los tipos de dato caracter o de texto en R se representan/encierran mediante comillas dobles \" o sencillas ’ pero núnca a través de una mezcla o combinación entre los dos tipos de comillas. “Hola mundo”, “Este es un dato de tipo texto”, ‘dato entre comillas sencillas’, “dato entre comillas dobles” son algunos ejemplos de datos de tipo cadena, texto o caracter en R. Ejemplo. Datos cadena/caracter A continuación, se presentan algunos ejemplos de datos de tipo cadena o caracter en R. Así mismo, el segundo de los ejemplos, presenta dos ejemplos que combinan comillas dobles y simples hecho que, como ya se mencionó, conducen a un error en R. # Ejemplo 1 # Con comillas dobles &quot;Hola&quot; ## [1] &quot;Hola&quot; &quot;Este es otro dato de tipo texto&quot; ## [1] &quot;Este es otro dato de tipo texto&quot; &quot;TRUE&quot; ## [1] &quot;TRUE&quot; # Con comillas sencillas &#39;dato entre comillas sencillas&#39; ## [1] &quot;dato entre comillas sencillas&quot; &#39;FALSE&#39; ## [1] &quot;FALSE&quot; &#39;2.35&#39; ## [1] &quot;2.35&quot; # Ejemplo 2 # Con comillas mezcladas (dobles y simples) &quot;Hola&#39; &#39;Hola mundo&quot; # Las anteriores dos líneas de código producen errores en R 2.2.2 Constantes integradas en R R, por defecto y de manera especial trae incluido un pequeño número de variables/palabras (5) que permiten la visualización de ciertos datos de tipo numérico o caracter de alto uso entre los usuarios, en especial, los de habla inglesa. A continuación, se presentan los cinco nombres especiales que trae incluido este software así como sus correspondientes significados. LETTERS: las 26 letras mayúsculas del alfabeto romano letters: las 26 letras minúsculas del alfabeto romano month.abb: abreviaturas de tres letras para los nombres de los meses en inglés month.name: los nombres en inglés de los meses del año pi: la relación entre la circunferencia de un círculo y su diámetro. También conocido como número pi. Ejemplo. Constantes integradas en R A continuación, se presenta el resultado de las constantes o palabras integradas y utilizadas por R. # Letras del abecedario en mayúsculas. LETTERS ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # Letras del abecedario en minúsculas. letters ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; # Primeras tres letras de los nombres de los meses - en inglés. month.abb ## [1] &quot;Jan&quot; &quot;Feb&quot; &quot;Mar&quot; &quot;Apr&quot; &quot;May&quot; &quot;Jun&quot; &quot;Jul&quot; &quot;Aug&quot; &quot;Sep&quot; &quot;Oct&quot; &quot;Nov&quot; &quot;Dec&quot; # Nombre de los meses - en inglés. month.name ## [1] &quot;January&quot; &quot;February&quot; &quot;March&quot; &quot;April&quot; &quot;May&quot; &quot;June&quot; ## [7] &quot;July&quot; &quot;August&quot; &quot;September&quot; &quot;October&quot; &quot;November&quot; &quot;December&quot; # Número pi pi ## [1] 3.141593 En este documento no haremos referencia a los números complejos. Estos, de amplio uso y estudio en el contexto de las matemáticas, se caracterízan por tener una parte entera y una imaginaria↩︎ El número de decimales a partir del cual R representa a los números reales en notación científica se da por defecto y el mismo, si se considera necesario, puede ser modificado↩︎ "],
["2-3-Aritmet.html", "2.3 Operaciones aritméticas", " 2.3 Operaciones aritméticas En esta sección se presentan las principales operaciones aritméticas empleadas en R. 2.3.1 Operaciones aritméticas en R R, en sentido estricto, puede ser considerado como una calculadora avanzada. A través de él es posible implementar las operaciones simples de la aritmética (básicas y complementarias) así como algunas operaciones avanzadas que van desde la combinación de las operaciones simples (compuestas) hasta su uso para otro tipo de operaciones (funciones trigonométricas, operaciones logarítmicas, potenciación, uso de radicales, etc.). En este texto, dado su caracter introductorio, se presentan las operaciones aritméticas simples (básicas o complementarias) así como algunas operaciones compuestas derivadas de la aplicación/combinación de dos o más operaciones simples. Operaciones aritméticas simples: Las operaciones aritméticas básicas o simples empleadas por R son la suma (+), la resta (-), la multiplicación (*) y la división (/). Ejemplos. Operaciones aritméticas básicas A continuación, se presentan algunos ejemplos con las principales operaciones simples empleadas por R. # Suma 3.5 + 7.7 ## [1] 11.2 3L + 10L ## [1] 13 1 + 8 ## [1] 9 # Resta 7.7 - 3.7 ## [1] 4 3L - 10L ## [1] -7 8 - pi ## [1] 4.858407 # Multiplicación 7.71 * 3.73 ## [1] 28.7583 -3L * 10L ## [1] -30 1 * 8 ## [1] 8 # División 7.7 / 3.7 ## [1] 2.081081 12L / 4L ## [1] 3 -1 / 4 ## [1] -0.25 Operaciones aritméticas simples complementarias: Las operaciones aritméticas simples y complementarias empleadas por R son los exponentes (^), la división entera (%/%) y los módulos (%%). A continuación, se presenta una breve descripción de estos tres subtipos de operaciones simples complementarias. Exponentes: Consiste en elevar un número x a una potencia n. Es decir, multiplicar x por sí mismo tantas veces como se defina en n (ver siguiente fórmula). \\[\\begin{equation} x^n \\end{equation}\\] Por ejemplo, \\[\\begin{equation} 2^3 \\end{equation}\\] consiste en multiplicar el número 2 por sí mismo 3 veces; es decir, 2x2x2 cuyo resultado es igual a 8. Divisón Entera: La división entera de x%/%n devuelve el número máximo de veces que se encuentra un núemro n contenido dentro de un número x. Módulo: El módulo de una división x%%n devuelve el residuo o resto de la división entera de un número x por un número n. Ejemplos. Operaciones aritméticas complementarias A continuación, se presentan algunos ejemplos de operaciones aritméticas simples y complementarias en R. # Exponenciales 2^3 ## [1] 8 3^2 ## [1] 9 5^3 ## [1] 125 # Divisiones enteras 15%/%3 ## [1] 5 17%/%3 ## [1] 5 9%/%4 ## [1] 2 # Módulos 15%%3 ## [1] 0 17%%3 ## [1] 2 9%%4 ## [1] 1 Operaciones compuestas Una operación aritmética compuesta está conformada por la combinación de varias operaciones simples (sumas, restas, multiplicaciones, divisiones, exponentes, etc.). Ejemplos. Operaciones complejas A continuación, se presentan algunos ejemplos de operaciones aritméticas compuestas. 2 + 2 + 3*2 ## [1] 10 2*5 - 6/2 ## [1] 7 6/2*10/2 + 3 ## [1] 18 6/2*(2+1 + 2^3) ## [1] 33 Al observar detenidamente Los ejemplos de las operaciones aritméticas compuestas que se acaban de ilustrar, nos podemos dar cuenta que estas contienen sumas, restas, multiplicaciones y hacen uso de exponentes y paréntesis. Una pregunta que podría surgir de este hecho es ¿cuál es el orden en el que R calcula estas operaciones?. La respuesta a esta pregunta está contenida en una regla llamada de priorización o precedencia. Regla: Precedencia o priorización en operaciones aritméticas compuestas En una operación aritmética compuesta de R, los paréntesis se calculan primero, luego los exponentes, luego la división y multiplicación y, finalmente, la suma y la resta. Esta regla se conoce popularmente como PEMDAS5 En la siguiente ilustración se presenta un ejemplo de la importancia del conocimiento de la regla de priorización o precedencia en R. En esta ilustración las dos operaciones están compuestas de los mismos números, no obstante, los resultados obtenidos son diferentes (17 y 25). En la operación de la parte izquierda (Order by default), la regla PEMDAS indica que primero debemos realizar la multiplicación y luego la suma; en contraste, en la operación de la parte derecha (Using parentheses), la regla de precedencia nos dice que primero dedemos realizar las operaciones contenidas dentro de los paréntesis -la suma- y luego la multiplicación. Ilustración. Prioridad aritmética en R En el siguiente ejemplo se presentan los resultados obtenidos en R al desarrollar las dos operaciones contenidas en la anterior ilustración. Ejemplo. Ilustración de aplicación de regla de precedencia o priorización en operaciones aritméticas compuestas # por defecto 2 + 3*5 ## [1] 17 # usando paréntesis (2 + 3)*5 ## [1] 25 El conocimiento y uso de la regla de priorización o precencia PEMDAS tiene importantes implicaciones prácticas y técnicas las cuales han generado debate en la comunidad científica y se han convertido en una de las principales fuentes de error a la hora de enfrentarnos al desarrollo de operaciones artitméticas compuestas. El siguiente artículo, publicado en el diario el Espectador por el profesor Ignacio Mantilla, exrector de la Universidad Nacional de Colombia, muestra la importancia del tema el cual, como puede allí leerse, tiene implicaciones de alcance a nivel tecnológico. Invitamos al lector a explorar y analizar detenidamente el contenido de este artículo. Ver artículo directamente en: Ecuaciones de opinión Tipos de datos de expresiones numéricas El resultado de una operación aritmética (simple o compuesta) es un número. No obstante, como se acaba de presentar, los tipos de datos numéricos en R pueden ser de dos tipos: numéricos -en sentido estricto- o enteros. En este orden de ideas, una pregunta que surge al desarrollar una operación aritmética es: ¿cuál es el tipo de dato que resulta al implementar una operación aritmética en R? La respuesta a esta inquietud se presenta en la siguiente regla de este lenguaje. Regla: Tipos de datos resultantes de operaciones aritméticas En R, operaciones entre datos del mismo tipo, producen el mismo tipo de datos. En contraste, operaciones entre diferentes tipos de datos, producen el tipo de dato más elevado de acuerdo al siguiente ordenamiento (Numérico &gt; Entero &gt; Lógico) Al observar la segunda parte de la anterior regla llama la atención la inclusión de los tipos de datos lógicos o booleanos como un tipo de dato numérico en R. Pues bien, en este lenguaje de programación, el tipo de dato lógico FALSE es equivalente a 0 y el tipo de dato lógico TRUE es equivalente al valor 1. Este hecho, conlleva a la definición de la siguiente regla del lenguaje. Regla: Comportamiento numérico de los datos lógicos o booleanos En R, los tipos de datos booleanos (FALSE y TRUE), además de representar las condiciones de falso y verdadero, en términos numéricos, presentan las siguiente equivalencias: TRUE = 1 y FALSE = 0 Como consecuencia de la anterior regla, en R y aunque no se recomienda su uso, una operación aritmética (simple o compuesta), puede incluir datos de tipo booleano y el tipo de dato resultante sigue la regla del dato más elevado según el criterio antes presentado (Numérico &gt; Entero &gt; Lógico). A continuación, se presentan algunos ejemplos de operaciones aritméticas que involucran diversos tipos de datos. Invitamos al lector, de acuerdo a las dos reglas antes expuestas, a responder ¿cuál es el tipo de dato que resulta al desarrollar dichas operaciones? Ejemplo. Tipos de datos resultantes de expresiones numéricas 1L + 2L + 2L ## [1] 5 3L + 2 ## [1] 5 3L + 3*3 + 5/2 ## [1] 14.5 FALSE + 4 ## [1] 4 TRUE + FALSE ## [1] 1 FALSE + TRUE ## [1] 1 FALSE + FALSE ## [1] 0 TRUE + TRUE ## [1] 2 La sigla PEMDAS se derivada del inglés para Parentheses (Paréntesis), Exponents (Exponentes), Multiplication-Division (Multiplicación-División), Addition-Subtraction (Suma y resta).↩︎ "],
["2-4-Variables.html", "2.4 Variables", " 2.4 Variables Una de las funcionalidades y de las partes más importantes en el aprendizaje de R es la creación de variables. Una variable en R es un espacio reservado en memoria el cual está compuesto por un nombre y un contenido definido o asignado a este nombre. A continuación, se presenta un ejemplo de una variable en R. # ejemplo de una variable en R x &lt;- 5L En el ejemplo, hemos creado una variable llamada x y a esta se le ha asignado el valor/número entero 5. En R, el simbolo de asignación6 es &lt;-. El uso de variables en R es altamente frecuente pues a través de estas podemos reservar contenidos de nuestros procesos que serán usados en fases posteriores de nuestros análisis. Para mostrar el contenido de una variable en R, además de definir la variable, se debe adicionar una nueva línea de código a nuestros programas con el nombre de la variable o las variables cuyo contenido deseamos conocer. Por ejemplo, si deseamos conocer el contenido de la variable x definida en el ejemplo anterior, debemos adicionar una nueva línea de código con dicho nombre como se presenta a continuación. Ejemplo. Visualización del contenido de una variable en R # Visualización del contenido de una variable en R x &lt;- 5L x ## [1] 5 A continuación, se presentan otros ejemplos de visualización de variables en R. Ejemplo. Visualización del contenido de otras variables en R # Visualización del contenido de variables en R # Ejemplo 1 y &lt;- 5 + 3.2 y ## [1] 8.2 # Ejemplo 2 y &lt;- 1 + pi y ## [1] 4.141593 # Ejemplo 3 z &lt;- 5 + 3*(1 + 2^2) z ## [1] 20 # Ejemplo 4 x &lt;- 3 + 5 y &lt;- 4 x + y ## [1] 12 2.4.1 Nombre de variables Una vez que tenemos claro el objetivo con la creación de variables en R, el paso a seguir consiste en presentar algunas recomendaciones y restricciones a la hora de crear variables en R. Para ello, haremos uso de la siguiente regla en la que se presentan los criterios con las recomendaciones y las restricciones que deben ser tenidas en cuenta a la hora de crear nombres asociados a variables en R. Regla: Nombres de variables en R (recomendaciones y restricciones) En R, para nombrar una variable, existen 5 criterios o reglas que deben ser tenidas en cuenta: Los nombres de las variables consisten en letras (mayúsculas o minúsculas), números, un punto (.) o un guión bajo (_). Podemos comenzar un nombre de variable con una letra o un punto, pero los puntos no pueden ser seguidos por un número. No podemos comenzar un nombre de variable con un número. No se permiten caracteres especiales, por ejemplo, espacios, símbolos de operadores, paréntesis. No podemos usar una palabra clave ya utilizada e interpretada por R como un nombre de variable (Palabras Reservadas). Por ejemplo, if, else, for, while, break, next, repeat, NA, NULL y NaN El contenido de los criterios presentados en la anterior regla se ilustra, con algunos ejemplos de nombres válidos y no válidos para variables en R, a través de la figura que se presenta a continuación. Ilustración. Nombres correctos e incorrectos para nombrar variables en R Además de los criterios presentados en la regla para la asignación de nombres de variables en R, se recomienda que el nombre que se asigne a estas se corresponda con el contenido de las mismas. Por ejemplo, si en una variable se aloja la edad de una persona, sería conveniente que esta variable se llame o nombre como edad. De la misma manera, aunque R permite que los nombres de las variable sean grandes (alta cantidad de caractéres), se recomienda que los mismos no sean demasiado largos. Finalmente, aunque no se recomienda, es normal encontrar en la práctica interesados en nombrar variables con nombres compuestos separados por espacios. Si este es el caso, los nombres compuestos de estas variables deben estar contenidos dentro de comillas a la izquierda. A continuación, se presentan tres ejemplos con nombres de variables compuestos. # Ejemplo 1 `Nombre variable` &lt;- 4.5 # Ejemplo 2 `Nombre compuesto` &lt;- 0 # Ejemplo 3 `Este es otro nombre para mi variable` &lt;- -10L 2.4.2 Tipos de variables El trabajo con variables en R, como ya se mencionó, es altamente frecuente hecho que conlleva a que en algunos casos olvidemos el tipo de elementos que estas contienen. Para ello, en R existe una función7 llamada class() que nos permite conocer la tipología de los elementos que hacen parte de una variable. A continuación, a modo de ejemplo, se definen 5 variables, se expone su contenido y se indaga, haciendo uso de la función class, por los tipos de datos que estas variables contienen. Ejemplo. Tipos de variables en R # Ejemplo 1 var_1 &lt;- TRUE var_1 ## [1] TRUE class(var_1) ## [1] &quot;logical&quot; # Ejemplo 2 var_2 &lt;- 2L var_2 ## [1] 2 class(var_2) ## [1] &quot;integer&quot; # Ejemplo 3 var_3 &lt;- 0.14 var_3 ## [1] 0.14 class(var_3) ## [1] &quot;numeric&quot; # Ejemplo 4 var_4 &lt;- var_1 + var_2 + var_3 var_4 ## [1] 3.14 class(var_4) ## [1] &quot;numeric&quot; # Ejemplo 4 var_5 &lt;- LETTERS var_5 ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; class(var_5) ## [1] &quot;character&quot; El tipo de dato contenido en la variable del ejemplo 1 (var_1) es de tipo lógico, el de la variable 2 (var_2) es de tipo entero, el de las variable 3 y 4 (var_3 y var_4) es de tipo numérico y, finalmente, el tipo de dato contenido en la variable del ejemplo 5 (var_5) es de tipo cadena o caracter. También pueden ser empleados, como símbolos de asignación, las expresiones = o -&gt;. Para el último de estos casos las partes contenidas dentro de una variable deben ser invertidas (5 -&gt; x). Aunque las tres formas de asignación (&lt;- , = , -&gt;) son válidas, se recomienda el uso de la primera (&lt;-) para evitar confusiones, en el caso de la igualdad, cuando este sea usado en el contexto de las funciones y en, en el otro caso (-&gt;), por ser contraintuitivo al pensamiento humano↩︎ Esta es la primera vez que hacemos uso, dentro de este documento, de una función. R, en sentido estricto, es un lenguaje de tipo funcional; es decir, altamente/totalmente soportado en funciones. Más adelante se contará con una sección dedicada al uso y construcción de funciones en R↩︎ "],
["2-5-Elogicas.html", "2.5 Expresiones lógicas", " 2.5 Expresiones lógicas Una expresión lógica en R está compúesta por dos componentes mediados por operadores que pueden ser de dos tipos: relacionales o lógicos. A continuación, se presenta un ejemplo con una operación lógica en R. Esta, como se mencionó, está compuesto de dos partes (izquierda y derecha) y es mediada por un operador lógico (&gt;=). En específico, la expresión lógica del siguiente ejemplo indaga si el número 5 (parte izquierda) es mayor o igual &gt;= (operador relacional) que el número 4 (parte derecha). # Ejemplo de una expresión lógica 5 &gt;= 4 El resultado de una operación lógica es un dato de tipo booleano (TRUE o FALSE)8. Este hecho, implica la siguiente regla aplicable a este lenguaje de programación. Regla: Resultado de expresiones lógicas En R, el resultado de una operación lógica, es un dato o literal de tipo booleano (TRUE o FALSE) 2.5.1 Operadores Relacionales Como se mencionó previamente, en R existen dos tipos de operadores asociados a las expresiones lógicas: relacionales y lógicos. Los operadores relacionales disponibles en R son: Menor que ( &lt; ) Mayor que ( &gt; ) Menor o igual que ( &lt;= ) Mayor o igual que ( &gt;= ) Igual a ( == ) No es igual a (diferente) ( != ) A continuación, se presentan algunos ejemplos de expresiones lógicas en R haciendo uso de operadores relacionales con sus respectivos resultados (TRUE o FALSE). Ejemplo. Expresiones lógicas con operadores relacionales # Ejemplo 1 1 &lt; 3 ## [1] TRUE # Ejemplo 2 3 &gt; 3 ## [1] FALSE # Ejemplo 3 4 &lt;= 4 ## [1] TRUE # Ejemplo 4 3 &gt;= 2 ## [1] TRUE # Ejemplo 5 3 == 3 ## [1] TRUE # Ejemplo 6 TRUE == FALSE ## [1] FALSE # Ejemplo 7 TRUE == 1 ## [1] TRUE # Ejemplo 8 FALSE == 0 ## [1] TRUE # Ejemplo 9 3 != 3 ## [1] FALSE # Ejemplo 10 FALSE != 0 ## [1] FALSE # Ejemplo 11 &quot;Uno&quot; != &quot;1&quot; ## [1] TRUE # Ejemplo 12 &quot;Uno&quot; == &quot;Uno&quot; ## [1] TRUE Operaciones lógicas con operaciones aritméticas: Una expresión lógica, además de operadores relacionales, puede involucrar operaciones aritméticas simples, complementarias o compuestas. El ejemplo, que se presenta a continuación, ilustra una expresión lógica que involucra operaciones ariméticas compuestas. Ejemplo. Expresiones lógicas con operadores relacionales y operaciones ariméticas 12.10 - 10.50 &lt; 24.90 * 21.15 ## [1] TRUE Una pregunta que surge, al momento de disponer de una operación lógica que involucra operaciones arirméticas y lógicas es qué evalúa R primero, ¿la operación aritmética o la expresión lógica? La respuesta a esta inquietud conduce a la siguiente regla del lenguaje. Regla: Precedencia en expresiones lógicas En R, al evaluar una expresión lógica que hace uso de operadores relacionales y operaciones aritméticas, primero se evalúan las expresiones aritméticas y luego las expresiones lógicas Operaciones lógicas haciendo uso de variables: El resultado de las operaciones aritméticas, así como de las expresiones lógicas, pueden ser almacenados a través del uso de variables. Es decir, en lugar de evaluar de manera directa una expresión lógica y sus componentes, estos pueden ser evaluados previamente a través del uso de variables. A continuación, se presentan 2 ejemplos de expresiones lógicas en las que se hace uso de variables. Ejemplo. Expresiones lógicas con operadores relacionales y variables # Ejemplo 1 Var_1 &lt;- 12.10 - 10.50 Var_2 &lt;- 24.90 - 21.15 Var_1 &lt; Var_2 ## [1] TRUE # Ejemplo 2 Var_3 &lt;- 12.10 * 12L Var_4&lt;- 4.99 * 24L Var_5 &lt;- Var_3 == Var_4 Var_5 ## [1] FALSE En el ejemplo 1, se crean las variables Var_1 y Var_2 que contienen el resultado de aplicar dos operaciones aritméticas compuestas y, en la tercera línea del código (Var_1 &lt; Var_2), se evalúa la expresión lógica propuesta entre estas dos variables (Var_1 &lt; Var_2). En el ejemplo 2, las variables Var_3 y Var_4 contienen los resultados de dos operaciones aritméticas simples y la variable Var_5 el resultado de la operación lógica definida entre estas dos variables (Var_3 == Var_4). En este ejemplo, la última línea del código (la 4) nos permite visualizar el resultado de la operación lógica implementada a través del uso de variables. 12.10 * 12L == 4.99 * 24L ## [1] FALSE 2.5.2 Operadores Lógicos Los operadores lógicos en R permiten evaluar la condiciones de verdad o de falsedad9 al comparar los resultados entre dos operaciones lógicas relacionales. Los operadores lógicos disponibles en R son: Y lógico ( &amp; ) O lógico ( | ) No lógico ( ! ) Los resultados obtenidos a la hora de la aplicación de los tres operadores lógicos disponibles en R se presentan en el gráfico que se dispone a continuación. El resultado de una operación lógica que involucra el operador lógico &amp; (Y) solamente será cierta (TRUE) cuando las dos condiciones evaluadas sean ciertas. El resultado de una operación lógica que involucra el operador lógico | (O) solamente será falsa (FALSE) cuando las dos condiciones evaluadas sean falsas y, finalmente, el operador de negación (NO) cambia el resultado obtenido (TRUE por FALSE y viceversa). Ilustración Resultado operadores lógicos A continuación, se presnetan los resultados en R de los operadores lógicos expuestos en la anterior imagen. Ejemplo. Resultados expresiones lógicas con operadores lógicos # Con el operador lógico &amp; TRUE &amp; TRUE ## [1] TRUE TRUE &amp; FALSE ## [1] FALSE FALSE &amp; TRUE ## [1] FALSE FALSE &amp; FALSE ## [1] FALSE # Con el operador lógico | TRUE | TRUE ## [1] TRUE TRUE | FALSE ## [1] TRUE FALSE | TRUE ## [1] TRUE FALSE | FALSE ## [1] FALSE # Con el operador lógico de negación !TRUE ## [1] FALSE !FALSE ## [1] TRUE 2.5.3 Combinando operadores En buena parte de esta sección hemos explorado las posibilidades que nos ofrece R para construir operaciones aritméticas simples o compuestas, disponer los resultados obtenidos dentro de variables así como crear expresiones de tipo lógico las cuales pueden estar asociadas a operadores relacionales o lógicos. Para finalizar esta sección, exploraremos la forma como R evalúa operaciones lógicas que hacen uso de los múltiples conceptos vistos hasta ahora. Para ello, se presenta a modo de ejemplo, la siguiente expresión lógica. # Ejemplo de una expresión lógica compleja (40/2^3) + 2 &gt;= 7 | 5*5 - 5 &lt; 20 Al explorar el contenido de la anterior expresión lógica podemos observar que esta contiene operaciones aritméticas compuestas conformadas por exponentes, sumas, restas, divisiones, multiplicaciones y paréntesis. Así mismo, el ejemplo hace uso de expresiones lógicas asociadas a operadores relacionales y lógicos. La pregunta que surje ahora es: ¿cuál es el resultado de esta operación y cómo R procede para su desarrollo o evaluación? Para dara respuesta a ello, se presenta la siguiente regla del lenguaje la cual puede ser considerada de alcance general ya que incluye otras reglas presentadas hasta ahora. Regla: Precedencia o priorización general en R En R, teniendo en cuenta los operadores vistos hasta ahora y que conforman las operaciones aritméticas y las expresiones lógicas, la regla de priorización general que gobierna la evaluación de dichas expresiones es: Paréntesis Exponentes División y multiplicación Adición y sustracción Operadores relacionales Operadores logicos Es decir, en el ejemplo expuesto anteriormente, en el proceso de evaluación/compilación, el lenguaje primero realiza las operaciones que están dentro de los paréntesis, paso seguido calcula las multiplicaciones, luego las sumas y las restas y, finalmente, evalúa las expresiones lógicas asociadas a operadores relacionales para culminar con la evaluación resultante que involucra a los operadores de tipo lógico. A continuación, se presenta el resultado en R al evaluar la expresión lógica de nuestro ejemplo así como un ejemplo complementario a este. Ejemplo. Resultados expresiones lógicas compuestas # Ejemplo 1 (40/2^3) + 2 &gt;= 7 | 5*5 - 5 &lt; 20 ## [1] TRUE # Ejemplo 2 (40/2^3) + 2 &gt;= 7 &amp; 5*5 - 5 &lt; 20 ## [1] FALSE 2.5.4 Coerción en expresiones lógicas El último componente que abordaremos a la hora de interactuar con expresiones lógicas en R es el principio de coerción que este lenguaje implementa a la hora de evaluar este tipo de expresiones. Para explicar este principio, nos valdremos del siguiente ejemplo. Ejemplo. Filosofía de la coerción en expresiones lógicas # Ejemplo. Coerción en expresiones lógicas &quot;1&quot; == 1 La expresión lógica del ejemplo, que hace uso del operador relacional Igual a:, indaga si el dato de tipo caracter “1” es igual al dato de tipo numérico 1. De manera ligera, es natural pensar que un dato de tipo caracter o textual es diferente a un dato de tipo numérico y que R, para el caso de la igualdad evaluada en el ejemplo, debería retornar como respuesta FALSE. No obstante, la respuesta que retorna el lenguaje al evaluar la operación lógica del ejemplo es TRUE y la pregunta que surge es, ¿por qué? La repuesta a esta inquietud, radica en la siguiente regla que implementa el lenguaje a la hora de evaluar expresiones lógicas conocida como regla de coerción. Regla:Coerción en expresiones lógicas Para que una expresión lógica pueda ser evaluada en R, los componentes de la expresión (partes izquierda y derecha) deben de ser del mismo tipo y para ello hace uso de la siguiente jerarquía según los tipos de datos involucrados en estas. caracter &gt; numérico &gt; entero &gt; lógico Es decir, en la igualdad del ejemplo propuesto \"1\" == 1 R, al detectar que los tipos de datos involucrados en la igualdad son de diferentes tipologías, lo primero que hace es igualarlos según la jereraquía propuesta. Según la regla, un dato de tipo textual o caracter tiene mayor jerarquía que un dato de tipo numérico (caracter &gt; numérico) hecho que conduce a R a convertir el dato de tipo numérico 1 en un dato de tipo textual “1” para garantizar que los tipos de datos involucrados en la expresión lógica sean del mismo tipo. En conclusión, al evaluar la operación lógica \"1\" == 1 en R, por la regla de coherción, lo que el lenguaje efectivamente evaluará es la operación \"1\" == \"1\" cuyo resultado es TRUE. A continuación, se presentan otros ejemplos en lo que se invita al lector a reflexionar sobre la forma como R está aplicando en ellos la regla de coerción. Ejemplo. Coerción en expresiones lógicas # Ejemplo 1. Coerción entre datos de tipo numérico y lógico TRUE == 1 ## [1] TRUE # Ejemplo 2. Coerción entre datos de tipo entero y lógico 1L == TRUE ## [1] TRUE # Ejemplo 3. Coerción entre datos de tipo numérico y entero 1 &gt;= 1L ## [1] TRUE # Ejemplo 4. Coerción entre datos de tipo caracter y entero &quot;1&quot; != 1L ## [1] FALSE # Ejemplo 5. Coerción entre datos de tipo caracter y lógico &quot;0&quot; == FALSE ## [1] FALSE En el ejemplo de la expresión lógica 5 &gt;= 4, el resultado es igual a TRUE dado que 5 es mayor o igual que 4↩︎ Estos operadores hacen parte de lo que en lógica matemática se conoce como tablas de verdad. En R, en el contexto de los operadores se hace uso de las tablas de verdad asociadas a la conjunción (∧), la disyunción (∨) y la negación (¬)↩︎ "],
["2-6-Edatos.html", "2.6 Estructuras de datos", " 2.6 Estructuras de datos En las secciones anteriores se presentaron, principalmente, los tipos de datos de mayor uso en R; la posibilidad de implementar en este expresiones aritméticas a través del uso de operaciones simples y compuestas; la creación y el nombramiento de variables así como la implementación de expresiones lógicas haciendo uso de operadores relacionales y de tipo lógico. En esta sección del documento, nos concentraremos en el estudio de las principales estructuras de datos existentes en R. Una estructura de datos en R, es un artefacto conformado o no por datos del mismo tipo. En este lenguaje, existen 5 estructuras de datos, principalmente: vectores, matrices, arreglos, marcos de datos o data frame y listas10. A continuación, el diagrama, presenta una representación/esquematización gráfica de la arquitectura que hace parte de cada una de las estructuras de datos que serán presentadas en este apartado. Principales estructuras de datos en R. Extraída de https://medium.com/@tiwarigaurav2512/r-data-types-847fffb01d5b 2.6.1 Vectores La primera estructura de datos empleda por R son los vectores. Estos, como se ilustra en la siguiente imagen, están conformados por “filas/columnas” de tipo unidimensional en cuyo interior existen datos de una misma tipología. Representación gráfica de un vector A continuación, se presenta la regla general para la construcción de vectores en R. Regla: Construcción de vectores en R En R, los vectores se construyen haciendo uso de paréntesis precedidos de la letra minuscula c c(). Así mismo, los elementos o tipos de datos que conforman un vector están separados por comas y estos deben ser en su totalidad de la misma tipología. A continuación, se presentan y evalúan dos ejemplos de vectores en R. El primero, está conformado por los números del 1 al 5 (datos de tipo numérico) y el segundo, está conformado por los números enteros del 6 al 10 cuyo resultado es almacenado a través de la conformación/definición de una variable llamada y. Ejemplo. Vectores en R # Ejemplo 1. Ilustración de un vector en R c(1, 2, 3, 4, 5) ## [1] 1 2 3 4 5 # Ejemplo 2. Ilustración de un vector en R dentro de una variable y &lt;- c(6L, 7L, 8L, 9L, 10L) y ## [1] 6 7 8 9 10 En R, a diferencia de lo que pasa en otros lenguajes de programación, no existe una estructura de datos que haga referencia a los escalares11. Los escalares en R son entendidos como vectores de longitud 1. Este hecho, implica la siguiente regla del lenguaje. Regla: Escalares en R En R, a diferencia de otros lenguajes de programación, no existen datos de tipo escalar. Estos son considerados vectores de longitud 1. A continuación, se presentan algunos ejemplos en donde se ilustra el uso de los escalares en R como vectores de longitud 1. Ejemplo. Escalares como vectores en R # Ejemplo 1. Escalares en R 1L ## [1] 1 2.23 ## [1] 2.23 # Ejemplo 2. Escalares como vectores en R c(1L) ## [1] 1 c(2.23) ## [1] 2.23 # Ejemplo 3. Variables y escalares en R Var_1 &lt;- 1L Var_1 ## [1] 1 var_2 &lt;- c(1L) var_2 ## [1] 1 2.6.1.1 Tipos de vectores Los elementos que conforman un vector en R, como se mencionó en la regla anterior, deben ser del mismo tipo. Este hecho implica que, en este lenguaje podemos construir vectores los cuales, dependiendo del tipo de datos que contienen, pueden ser clasificados en una de cuatro categorías: lógicos, enteros, numéricos y de cadena o caracter. A continuación, se presenta una breve descripción así como algunos ejemplos de los diferentes tipos de vectores existentes en R. Lógicos Los vectores lógicos en R, como su nombre lo indica, están conformados por elementos de tipo lógico (TRUE o FALSE). A continuación, se presentan algunos ejemplos de vectores de tipo lógico en R. Ejemplo. Vectores lógicos en R # Ejemplo 1. Mi primer vector Lógico c(TRUE, FALSE, FALSE, TRUE) ## [1] TRUE FALSE FALSE TRUE # Ejemplo 2. Otro vector lógico en R c(TRUE, FALSE) ## [1] TRUE FALSE # Ejemplo 3. Un vector lógico dentro de una variable en R x &lt;- c(TRUE, FALSE, FALSE) x ## [1] TRUE FALSE FALSE Enteros Los vectores de tipo entero en R, como su nombre lo indica, están conformados por elementos de que se corresponden con los número enteros. A continuación, se presentan algunos ejemplos de vectores de tipo entero en R. Ejemplo. Vectores enteros en R # Ejemplo 1. Mi primer vector entero c(12L, 3L, 24L, 8L) ## [1] 12 3 24 8 # Ejemplo 2. Otro vector entero en R c(1L, 2L) ## [1] 1 2 # Ejemplo 3. Un vector entero dentro de una variable en R y &lt;- c(1L, -3L, 5L) y ## [1] 1 -3 5 Numéricos Los vectores de tipo numérico en R, como su nombre lo indica, están conformados por elementos de que se corresponden con los números reales. A continuación, se presentan algunos ejemplos de vectores de tipo numérico en R. Ejemplo. Vectores numéricos en R # Ejemplo 1. Mi primer vector numérico (real) c(12.10, 24.90, 4.99) ## [1] 12.10 24.90 4.99 # Ejemplo 2. Otro vector numérico en R c(1, 2.5, pi) ## [1] 1.000000 2.500000 3.141593 # Ejemplo 3. Un vector mumérico dentro de una variable en R z &lt;- c(2.3, -2.5, 7, 4) z ## [1] 2.3 -2.5 7.0 4.0 Cadena o caracter Los vectores de tipo cadena o caracter en R, como su nombre lo indica, están conformados por elementos en cuyo interior encontramos textos. A continuación, se presentan algunos ejemplos de vectores de tipo caracter en R. Ejemplo. Vectores cadena o caracter en R # Ejemplo 1. Mi primer vector de tipo caracter c(&quot;Lunes&quot;, &quot;Martes&quot;, &quot;Miércoles&quot;,&quot;Jueves&quot;, &quot;Viernes&quot;, &quot;Sábado&quot;,&quot;Domingo&quot;) ## [1] &quot;Lunes&quot; &quot;Martes&quot; &quot;Miércoles&quot; &quot;Jueves&quot; &quot;Viernes&quot; &quot;Sábado&quot; ## [7] &quot;Domingo&quot; # Ejemplo 2. Otro vector de tipo caracter c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; # Ejemplo 3. Un vector de tipo carcater dentro de una variable en R w &lt;- letters w ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; 2.6.1.2 Coerción en vectores Los vectores en R, como se ha mencionado, deben contener elementos del mismo tipo. Para que esta condición se cumpla, el lenguaje aplica la siguiente regla al momento de disponer de vectores en cuyo interior conviven elementos de diversas tipologías12. Regla:Coerción de vectores en R R, al detectar la presencia de un vector con elementos de diversos tipos, convierte/coerciona la totalidad de los elementos del vector en una única tipología siguendo la siguiente jerarquía. caracter &gt; numérico &gt; entero &gt; lógico Es decir, en R, si existe un vector con elementos de tipo lógico y de tipo entero, el resultado es un vector con la totalidad de elementos de tipo entero (entero &gt; lógico). Si existe un vector con elementos de tipo lógico, entero y numérico, el resultado es un vector con la totalidad de elementos de tipo numérico o real (numérico &gt; entero &gt; lógico). Finalmente, si existe un vector con elementos de tipo lógico, entero, numérico y caracter o cadena, el resultado es un vector con la totalidad de elementos de tipo caracter (caracter &gt; numérico &gt; entero &gt; lógico). A continuación, se presentan algunos ejemplos de aplicación de la regla de coerción de elementos de un vector en R. Ejemplo. Coerción de elementos de un vector en R # Ejemplo 1. Vector con elementos enteros y lógicos c(TRUE, FALSE, 2L, -10L) ## [1] 1 0 2 -10 # Ejemplo 2. Vector con elementos lógicos, enteros y numéricos c(FALSE, 5L, 10.2) ## [1] 0.0 5.0 10.2 # Ejemplo 3. Vector con elementos lógicos, enteros, numéricos y de tipo caracter c(TRUE, -2L, 3.1415, &quot;Lunes&quot;) ## [1] &quot;TRUE&quot; &quot;-2&quot; &quot;3.1415&quot; &quot;Lunes&quot; # Ejemplo 4. Vector con elementos lógicos y de tipo caracter dentro de una variable m &lt;- c(TRUE, FALSE, &quot;Junio&quot;) m ## [1] &quot;TRUE&quot; &quot;FALSE&quot; &quot;Junio&quot; 2.6.1.3 ¿Cómo crear vectores rápidamente? Uno de las actividades más frecuentes a la hora de trabajar con R implica el uso, la creación y la manipulación de vectores. Por esta razón, este lenguaje ofrece algunas alternativas para la creación de vectores de una manera rápida. Entre las alternativas existentes, sobresalen las siguientes tres funciones útiles para la creación de diversos tipos de vectores en R. Función : La función :, permite la creación de una secuencia numérica que inicia en el número de la parte izquierda, se incrementa de uno en uno y finaliza en el valor de la parte derecha. Por ejemplo, la secuencia 1:20, inicia en el valor 1 y se incrementa de uno en uno hasta alcanzar el valor 20; de igual manera, la secuencia 10:15, inicia en el valor 10 y se incrementa de uno en uno hasta alcanzar el valor 15. A continuación, se presentan algunos ejemplos del uso de la función : en la creación de vectores en R. Ejemplo. Creación de vectores haciendo uso de la función `:` # Ejemplo 1. Secuencia ascendente c(1:20) ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # Ejemplo 2. Secuencia ascendente c(10:15) ## [1] 10 11 12 13 14 15 # Ejemplo 3. Secuencia descendente c(10:1) ## [1] 10 9 8 7 6 5 4 3 2 1 # Ejemplo 4. Secuencias dentro de variables n &lt;- c(1:5) n ## [1] 1 2 3 4 5 Función seq() La función seq(), permite la creación de un vector con una secuencia de datos. No obstante, esta función, a diferencia de la función :, permite que el usuario defina el incremento o múltiplo que será tenido en cuenta dentro de la secuencia. Por ejemplo, la instrucción seq(from = 0, to = 30, by = 2), permite la creación de una secuencia de números que inicia en 1 (from), va hasta 30 (to) y se incrementa de dos en dos (by). En la función seq(from = 0, to = 30, by = 2), las palabras from, to y by, se conocen con el nombre de parámetros de la función seq(). Los parámetros de una función en R, como se verá en la sección de funciones, pueden ser o no incluidos13 al momento de invocar una función dependiendo del orden en el que estos fueron definidos por dicha función. Por el momento, como se corrobora en los ejemplos que se presentan a continuación, la instrucción seq(from = 0, to = 30, by = 2) es equivalente en R a la instrucción seq(0, 30, 2), sin el nombre de los parámetros. Ejemplo. Creación de vectores haciendo uso de la función `seq()` # Ejemplo 1. Secuencia ascendente seq(from = 0, to = 30, by = 2) ## [1] 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 seq(0, 30, 2) ## [1] 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 # Ejemplo 2. Secuencia descendente seq(from = 20, to = 0, by = -5) ## [1] 20 15 10 5 0 seq(20, 0, -5) ## [1] 20 15 10 5 0 # Ejemplo 3. Secuencias dentro de variables p &lt;- seq(1, 10, 2) p ## [1] 1 3 5 7 9 Función rep() La función rep(), permite la creación de un vector cuyos elementos se repiten un número determinado de veces. Por ejemplo, la instrucción rep(1, times = 5), crea un vector con el número 1 repetido 5 veces (times). De igual modo, la instrucción rep(1:3, times = 2), crea un vector con la secuencia de números del 1 al 3 repetida dos veces. La funciónrep(), además de permitir la creación de vectores cuyos elementos se repiten un número determinado de veces times, dispone de un parámetro llamado each a través del cual es posible definir cuántas veces deseamos que un elemento dentro de un vector se repita por sí mismo. Por ejemplo, la instrucción rep(1:2, times = 2, each = 4), construye un vector en donde los números definidos en la secuencia 1:2 se repite cada uno cuatro veces each = 4 y luego, el bloque con los elementos resultantes, se duplica times = 2. A continuación, se presentan algunos ejemplos de creación de vectores haciendo uso de la función rep(). Ejemplo. Creación de vectores haciendo uso de la función `rep()` # Ejemplo 1. Repeticiones simples (con times) rep(1, times = 5) ## [1] 1 1 1 1 1 rep(1, 5) ## [1] 1 1 1 1 1 rep(1:3, times = 2) ## [1] 1 2 3 1 2 3 rep(1:3, 2) ## [1] 1 2 3 1 2 3 # Ejemplo 2. Repeticiones simples (con each) rep(1, each = 5) ## [1] 1 1 1 1 1 rep(c(1:3), each = 2) ## [1] 1 1 2 2 3 3 # Ejemplo 3. Repeticiones compuestas con times y each rep(1, times = 2, each = 4) ## [1] 1 1 1 1 1 1 1 1 rep(1:2, times = 2, each = 4) ## [1] 1 1 1 1 2 2 2 2 1 1 1 1 2 2 2 2 # Ejemplo 4. Repeticiones compuestas con times y each rep(c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), times = 3, each = 2) ## [1] &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;c&quot; &quot;c&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;c&quot; &quot;c&quot; &quot;a&quot; &quot;a&quot; &quot;b&quot; &quot;b&quot; &quot;c&quot; &quot;c&quot; # Ejemplo 5. Repeticiones compuestas con times y each rep(c(TRUE, FALSE), times = 2, each = 3) ## [1] TRUE TRUE TRUE FALSE FALSE FALSE TRUE TRUE TRUE FALSE FALSE FALSE # Ejemplo 6. Repeticiones dentro de variables s &lt;- rep(10, 5) s ## [1] 10 10 10 10 10 2.6.1.4 Operaciones con vectores En R, es posible implementar operaciones entre vectores las cuales, al igual que el escenario de tipos de datos presentados en las secciones 2.3 y 2.5, pueden ser de dos clases: aritméticas y lógicas. 2.6.1.4.1 Operaciones aritméticas con vectores Adición, sustracción, multiplicación y división Al inicio de este capítulo, en la sección de operaciones aritméticas, se presentó la capacidad que tiene R para la evaluación de operaciones entre las que se destacan, desde luego, las basadas en los operadores aritméticos simples (+, -, *, /). En R, es posible implementar estas y otras operaciones entre vectores y para ello, este lenguaje, se vale de la siguiente regla. Regla: Operaciones aritméticas simples entre vectores En R, es posible implementar operaciones simples entre vectores; es decir, la suma, la resta, la multiplicación y la división. Al implementar estas operaciones, el lenguaje exige que los vectores involucrados tengan igual longitud -misma cantidad de elementos- y que estos sean del mismo tipo. En la figura de abajo, se ilustra una suma entre vectores asociados a dos variables exam_grades y homework_grades cuyo resultado es almacenado en una variable llamada sum_grades. Al observar la conformación de los vectores involucrados en la suma observamos que estos, además de tener elementos de una misma tipología, tienen igual longitud; es decir, cumplen con los requisitos exigidos para el desarrollo de esta operación. Ejemplo suma con vectores A continuación, se evalúa en R la operación entre vectores propuesta en la anterior imagen. Así mismo, en el ejemplo 2, se evalúa una operación entre vectores14 la cual incluye tres de los operadores aritméticos simples (+, - y /). Ejemplo. Ilustración de operaciones entre vectores en R # Ejemplo 1. Suma de vectores en R haciendo uso de variables exam_grades &lt;- c(92, 90, 84, 95, 77, 92, 85) homework_grades &lt;- c(87, 81, 95, 86, 85, 90, 88) sum_grades &lt;- exam_grades + homework_grades sum_grades ## [1] 179 171 179 181 162 182 173 # Ejemplo 2. Operaciones entre vectores (suma, resta y división) v1 &lt;- c(1:5) v2 &lt;- seq(from = 5, to = 1, by = -1) v3 &lt;- rep(1, times = 5) v4 &lt;- c(6, 6, 6, 6, 6) v5 &lt;- rep(2, 5) v6 &lt;- v4 / v5 total &lt;- v1 + v2 + v3 - v6 promedio &lt;- total / 4 promedio ## [1] 1 1 1 1 1 Reciclaje de elementos en operaciones aritméticas con vectores Las operaciones entre vectores, como se presentó en la anterior regla, exige que estos tengan igual longitud15; es decir, la misma cantidad de elementos. En este sentido, al observar el siguiente ejemplo que contiene una suma entre vectores de diferentes longitudes, la pregunta que surge es ¿qué hace R ante este escenario? y la respuesta es que este no genera un error; es decir, el lenguaje genera un resultado ante este escenario y para ello se vale de una regla conocida con el nombre de reciclaje de elementos. Regla: Reciclaje de elementos en operaciones entre vectores en R En una operación aritmética entre vectores de diferentes longitudes, R iguala las longitudes de los vectores con longitud menor. Para ello, recicla/rellena las posiciones faltantes partiendo del primer elemento que conforma cada uno de los vectores -las veces que sea necesario-, hasta el elemento que permita igualar la cantidad de elementos que contiene el vector de mayor longitud involucrado en la operación. Al aplicar la regla de reciclaje de elementos al ejemplo antes expuesto, como se ilustra en la siguiente imagen y se evalúa en la parte baja, el vector de menor longitud (variable homework_grades con dos elementos) recicla los elementos disponibles partiendo del primero (87) y así sucesivamente hasta alcanzar la misma cantidad del vector de mayor longitud involucrado dentro de la suma de vectores propuesta (variable exam_grades). Reciclaje de elementos en operaciones con vectores en R Ejemplo. Aplicación de la regla de reciclaje a operaciones entre vectores - caso suma # Ejemplo. Reciclaje en operaciones entre vectores - caso suma v1 &lt;- c(92, 90, 84, 95, 77, 92, 85) v2 &lt;- c(87, 81) suma &lt;- v1 + v2 ## Warning in v1 + v2: longitud de objeto mayor no es múltiplo de la longitud de ## uno menor suma ## [1] 179 171 171 176 164 173 172 Dado que la regla de reciclaje puede inducir a importantes errores para aquellos usuarios que desconozcan la forma como este lenguaje implementa operaciones entre vectores con diferentes longitudes, R, como se observa en los resultados del ejemplo anterior, genera un mensaje de alerta en la que se advierte sobre la presencia de vectores con longitudes disímiles en la operación evaluada. 2.6.1.4.2 Operaciones lógicas con vectores En R, como se presenta en la siguiente regla, es posible implementar operaciones de tipo lógico las cuales hacen uso de operadores de tipo relacional o lógico y cuyo resultado en un vector conformado por elementos de tipo lógico (TRUE o FALSE). Regla: Operaciones lógicas entre vectores En R, es posible implementar operaciones lógicas entre vectores de igual longitud haciendo uso de los operadores relacionales o de una combinación entre estos y los operadores lógicos. El resultado de una operación lógica entre vectores es un vector de tipo lógico. Operaciones lógicas con vectores - operadores relacionales Las operaciones lógicas entre vectores, como se acaba de definir, pueden hacer uso de los operadores de tipo relacional &lt;, &gt;, &lt;=, &gt;=, == y !=. Por ejemplo, si deseamos conocer las posiciones en las que se ubican números negativos en el vector Vect_1 &lt;- c(-2:4, 1, 2), implicaría en R la creación de la siguiente línea de código Vect_1 &lt; 0; de la misma manera, si deseamos conocer las posiciones en las que se ubica el número 1, basta con implementar dentro de este lenguaje la instrucción Vect_1 == 1. A continuación, en el ejemplo 1, se evalúan en R las operaciones lógicas discutidas en el párrafo anterior. Así mismo, en el ejemplo 2, se presentan otros ejemplos de operaciones lógicas con vectores haciendo uso de operadores relacionales. Ejemplo. Operaciones lógicas con vectores haciendo uso de operadores relacionales # Ejemplo 1. Operaciones lógicas con vectores haciendo uso de operadores relacionales # Creación y evaluación del vector Vect_1 &lt;- c(-2:4, 1, 2) Vect_1 ## [1] -2 -1 0 1 2 3 4 1 2 # Números negativos Vect_1 &lt; 0 ## [1] TRUE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE # Posiciones en las que se ubica el número 1 Vect_1 == 1 ## [1] FALSE FALSE FALSE TRUE FALSE FALSE FALSE TRUE FALSE # Ejemplo 2. Operaciones lógicas con vectores haciendo uso de operadores relacionales # Creación y evaluación del vector Vect_2 &lt;- c(10, 20, 15, 15, 20, 25, 30) Vect_2 ## [1] 10 20 15 15 20 25 30 # Posiciones en las que no se ubica el número 15 Vect_2 != 15 ## [1] TRUE TRUE FALSE FALSE TRUE TRUE TRUE # Posiciones con números mayores o iguales a 20 Vect_2 &gt;= 20 ## [1] FALSE TRUE FALSE FALSE TRUE TRUE TRUE # Posiciones con números mayores a 20 Vect_2 &gt; 20 ## [1] FALSE FALSE FALSE FALSE FALSE TRUE TRUE # Posiciones con números menores a 10 Vect_2 &lt; 10 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE Operaciones lógicas con vectores - operadores lógicos En R, además de implementar operaciones lógicas con vectores haciendo uso de operadores relacionales, es posible implementar operaciones que involucran a estos tipos de operadores y a los tres de naturaleza lógica (&amp;, | y !) que fueron discutidos en la sección 2.5. La implementación de operaciones lógicas entre vectores en donde se involucra tanto los operadores de tipo relacional como los de tipo lógico, implica a su vez el uso de dos o más vectores. Por ejemplo, si contamos con los vectores x &lt;- c(-3, 4, -5, 0, 1) e y &lt;- c(-10, 2, 0, 1, 1) y deseamos conocer las posiciones en las que ambos vectores disponen de números negativos, implica en R la construcción de la instrucción x &lt; 0 &amp; y &lt; 016. A continuación, en el ejemplo 1, se evalúan en R las operación lógica discutida en el párrafo anterior. Así mismo, en el ejemplo 2, se presentan otros ejemplos de operaciones lógicas con vectores haciendo uso de operadores relacionales y lógicos. Ejemplo. Operaciones lógicas con vectores haciendo uso de operadores relacionales y lógicos # Ejemplo 1. Operaciones lógicas con vectores haciendo uso de operadores relacionales y lógicos # Creación y evaluación de los vectores x &lt;- c(-3, 4, -5, 0, 1) x ## [1] -3 4 -5 0 1 y &lt;- c(-10, 2, 0, 1, 1) y ## [1] -10 2 0 1 1 # Posiciones negativas en los dos vectores x &lt; 0 &amp; y &lt; 0 ## [1] TRUE FALSE FALSE FALSE FALSE # Ejemplo 2. Operaciones lógicas con vectores haciendo uso de operadores relacionales y lógicos # Creación y evaluación de los vectores m &lt;- c(-3, 4, -5, 0, 1) m ## [1] -3 4 -5 0 1 n &lt;- c(-10, 2, 0, 1, 1) n ## [1] -10 2 0 1 1 # Posiciones positivas en los dos vectores x &gt; 0 &amp; y &gt; 0 ## [1] FALSE TRUE FALSE FALSE TRUE # Al menos una posición positiva en los dos vectores x &gt; 0 | y &gt; 0 ## [1] FALSE TRUE FALSE TRUE TRUE # Al menos una posición negativa o cero en los dos vectores !(x &gt; 0 &amp; y &gt; 0) ## [1] TRUE FALSE TRUE TRUE FALSE En la regla sobre operaciones lógicas entre vectores se aludió a la necesiad de que los vectores involucrados en estas operaciones tengan la misma longitud; es decir, igual cantidad de elementos. Pero, que pasa si por ejemplo, nos enfrentamos a operaciones en donde esta condición no se cumpla. La respuesta del lenguaje R ante este escenario es la aplicación de la regla de reciclaje de elementos resultantes en los vectores lógicos de menor longitud con el fin de igualar su contenido al de mayor longitud y poder implementar la operación deseada. Esta característica del lenguaje, se presenta en la siguiente regla. Regla: Reciclaje de elementos en operaciones lógicas entre vectores en R En una operación lógica entre vectores de diferente longitud R iguala, las longitudes de los vectores de menor tamaño17, con la longitud del vector de mayor tamaño involucrado en la operación. A continuación, se presenta un ejemplo de la aplicación de la regla de reciclaje de elementos en R en operaciones lógicas entre vectores. Ejemplo. Aplicación regla de reciclaje de elementos en operaciones lógicas entre vectores # Ejemplo. Operaciones lógicas con vectores haciendo uso de operadores relacionales y lógicos # Creación y evaluación vector de longitud 5 x &lt;- c(-3, 4, -5, 0, 1) x ## [1] -3 4 -5 0 1 # Creación y evaluación vector de longitud 3 y &lt;- c(-10, 2, 0) y ## [1] -10 2 0 # Operación lógica con operador relacional vector x x &lt; 0 ## [1] TRUE FALSE TRUE FALSE FALSE # Operación lógica con operador relacional vector y y &lt; 0 ## [1] TRUE FALSE FALSE # Operación lógica con operadores relacionales y lógicos # vectores x e y de diferente longitud # aplicación de la regla de reciclaje x &gt; 0 &amp; y &gt; 0 ## Warning in x &gt; 0 &amp; y &gt; 0: longitud de objeto mayor no es múltiplo de la longitud ## de uno menor ## [1] FALSE TRUE FALSE FALSE TRUE Dado que la regla de reciclaje puede inducir a importantes errores para aquellos usuarios que desconozcan la forma como este lenguaje implementa operaciones lógicas entre vectores con diferentes longitudes, R, como se observa en los resultados del ejemplo anterior, genera un mensaje de alerta (Warning) en el que se advierte sobre la presencia de vectores con longitudes disímiles en la operación evaluada. 2.6.1.5 Indexación/subconjuntos de vectores Una de las acciones más frecuentes a la hora de trabajar con vectores o cualquier otra estructura de datos en R, como veremos en adelante, es la orientada a la extracción o indexación de un subconjunto de sus elementos. Para ello, hay que tener en cuenta que R es un lenguaje de programación indexado en 1; es decir, para el caso del trabajo con vectores, al primer elemento se le asigna la posición 1. Para extraer elementos de un vector, como se muestra en la figura de abajo, hay que comprender que cada uno de los elementos que conforman un vector tiene asociada una posición conocida como indíce. En el vector ilustrado en la figura, al número 92 le corresponde la posición 1, al 87 la posición 2 y al 85 la posición 3. Gráfico con ilustración de índices dentro de vectores Para extraer elementos o subconjuntos de un vector debemos tener en cuenta la siguiente regla asociada a este lenguaje. Regla: Subconjuntos de vectores en R Para extraer elementos de un vector en R se usan corchetes [ ] Por ejemplo, si deseamos extraer el elemento 85 contenido en el vector ilustrado en la figura anterior bastaría con indicar, entre corchetes, la posición dentro del vector en la cual se encuentra ubicado dicho elemento; es decir, la tercera o 3. Una vez identificada la posición de dicho elemento, se procede a generar la instrucción dentro de R que nos permita extraer el o los elementos deseados la cual, para el caso de nuestro ejemplo, es c(92, 87, 85)[3]. En R, no es común que la indexación o creación de subconjuntos de elementos de un vector o de otra estructura de datos se haga directamente sobre el vector -como se acaba de presentar-; lo común, es que esta se dé sobre el mombre de una variable que contiene los elementos de dicho vector. A continuación, se extrae el elemento 85 del vector de nuestro ejemplo haciendo uso de variables cuyo resultado, como se mostrará, es equivalente al haber aplicado la extracción sobre el vector puro u original. Ejemplo. Extracción de elementos de un vector # Ejemplo 1. Extracción directa - no recomendada. c(92, 87, 85)[3] ## [1] 85 # Ejemplo 2. Extracción haciendo uso de nombres de vectores (variables) - recomendada vector_1 &lt;- c(92, 87, 85) vector_1[3] ## [1] 85 En R y en los entornos de análisis de datos, más que extraer un elemento de un vector, como se acaba de ilustrar en el ejemplo propuesto, el objetivo es obtener un subconjunto de elementos contenidos en ciertas posiciones que cumplen algunas características requeridas por los usuarios. Para ello, se acude al uso de vectores que contienen las posiciones que se requieren extraer. Este hecho, implica la siguiente regla asociada a las posibilidades existentes en este lenguaje para extraer elementos de un vector a partir de las posiciones contenidas en otro vector. Regla: Subconjuntos de vectores en R En R, existen seis (6) posibilidades para extraer elementos de un vector: vectores con enteros positivos, vectores con enteros negativos, vectores lógicos, vectores de tipo caracter, ninguno (nothing) y cero (zero)18. A continuación, se presenta con mayor detalle, tres de las cuatro opciones que serán tenidas en cuenta en este documento para la extracción de elementos de un vector19. Vectores con enteros positivos La extracción de elementos a partir de vectores conformados por enteros positivos retorna los elementos disponibles en las posiciones especificadas. Por ejemplo, si se desea obtener los valores contenidos en las posiciones 1, 3 y 5 del vector Vect_1 &lt;- c(15, 17, 12, 45, 13, 18) haciendo uso de enteros positivos, la instrucción en R sería Vect_1[c(1, 3, 5)]. A continuación, en el ejemplo 1, se presenta la implementación de esta instrucción en R; así mismo, en el ejemplo 2, se presentan otros subconjuntos de un vector en R haciendo uso de vectores conformados por enteros positivos. Invitamos al lector a analizar y entender la filosofía existente atrás de estos ejemplos. Ejemplo. Extracción de elementos de un vector con entero positivos # Ejemplo 1. Selección de elementos de un vector en R haciendo uso de enteros positivos Vect_1 &lt;- c(15, 17, 12, 45, 13, 18) Vect_1[c(1,3,5)] ## [1] 15 12 13 # Ejemplo 2. Selección de elementos de un vector en R haciendo uso de enteros positivos #Creación y visualización del vector Vect_2 con las 26 letras mayúsculas del alfabeto romano Vect_2 &lt;- LETTERS Vect_2 ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; &quot;F&quot; &quot;G&quot; &quot;H&quot; &quot;I&quot; &quot;J&quot; &quot;K&quot; &quot;L&quot; &quot;M&quot; &quot;N&quot; &quot;O&quot; &quot;P&quot; &quot;Q&quot; &quot;R&quot; &quot;S&quot; ## [20] &quot;T&quot; &quot;U&quot; &quot;V&quot; &quot;W&quot; &quot;X&quot; &quot;Y&quot; &quot;Z&quot; # Selecionar las primeras 5 letras mayúsculas del alfabeto romano- alternativa 1 Vect_2[c(1, 2, 3, 4, 5)] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; # Selecionar las primeras 5 letras mayúsculas del alfabeto romano- alternativa 2 Vect_2[c(1:5)] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; # Selecionar las primeras 5 letras mayúsculas del alfabeto romano- alternativa 3 Vect_2[1:5] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; # Selecionr las primeras 5 letras mayúsculas del alfabeto romano- alternativa 4 Vect_2[seq(from = 1, to = 5, by = 1)] ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; # Selecionar la primera y la última letra del alfabeto romano Vect_2[c(1, 26)] ## [1] &quot;A&quot; &quot;Z&quot; # Selecionar la vocales del alfabeto romano Vect_2[c(1L, 5L, 9L, 15L, 21L)] ## [1] &quot;A&quot; &quot;E&quot; &quot;I&quot; &quot;O&quot; &quot;U&quot; # Selecionar la letra c del alfabeto romano 5 veces Vect_2[rep(3, times = 5)] ## [1] &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; &quot;C&quot; # Seleccionar las letras del alfabero romano ubicadas en las posiciones 1, 4, 7, 1, ... (de tres en tres) Vect_2[seq(1, 26, 3)] ## [1] &quot;A&quot; &quot;D&quot; &quot;G&quot; &quot;J&quot; &quot;M&quot; &quot;P&quot; &quot;S&quot; &quot;V&quot; &quot;Y&quot; # Seleccionar últimas tres letras del alfabero romano y guardar el resultado en una variable (Vect_3) Vect_3 &lt;- Vect_2[c(24:26)] Vect_3 ## [1] &quot;X&quot; &quot;Y&quot; &quot;Z&quot; Vectores con enteros negativos La extracción de elementos de un vector a partir de vectores conformados por enteros negativos excluye los elementos en las posiciones especificadas. Por ejemplo, si se desea obtener un vector que excluya las posiciones 1, 3 y 5 del vector Vect_4 &lt;- c(15, 17, 12, 45, 13, 18) haciendo uso de enteros negativos, la instrucción en R sería Vect_4[c(-1, -3, -5)]. A continuación, en el ejemplo 1, se presenta la implementación de esta instrucción en R; así mismo, en el ejemplo 2, se presentan otros subconjuntos de un vector en R haciendo uso de vectores conformados por enteros negativos. Invitamos al lector a analizar y entender la filosofía existente atrás de estos ejemplos. Ejemplo. Extracción de elementos de un vector con enteros negativos # Ejemplo 1. Selección de elementos de un vector en R haciendo uso de enteros negativos Vect_4 &lt;- c(15, 17, 12, 45, 13, 18) Vect_4[c(-1, -3, -5)] ## [1] 17 45 18 # Ejemplo 2. Selección de elementos de un vector en R haciendo uso de enteros negativos0/ # Crear un vector de tipo numérico - primeros 10 números primos Vect_5 &lt;- c(2, 3, 5, 7, 11, 13, 17, 19, 23, 29) # Excluir los primeros cinco números primos - alternativa 1 Vect_5[c(-1, -2, -3, -4, -5)] ## [1] 13 17 19 23 29 # Excluir los primeros cinco números primos - alternativa 2 Vect_5[c(-1:-5)] ## [1] 13 17 19 23 29 # Excluir los primeros cinco números primos - alternativa 3 Vect_5[-c(1:5)] ## [1] 13 17 19 23 29 # Excluir los primeros cinco números primos - alternativa 4 Vect_5[seq(from = -1, to = -5, by = -1)] ## [1] 13 17 19 23 29 # Excluir el primer número primo Vect_5[c(-1)] ## [1] 3 5 7 11 13 17 19 23 29 # Excluir el octavo, el noveno y el décimo número primo Vect_5[c(-8L:-10L)] ## [1] 2 3 5 7 11 13 17 # Excluir los primeros siete números primos y guardar el resultado en una variable (Vec_6) Vect_6 &lt;- Vect_5[-c(1:7)] Vect_6 ## [1] 19 23 29 Vectores lógicos La extracción de elementos de un vector a partir de vectores conformados por elementos lógicos permite la selección de los elementos donde el valor lógico correspondiente es verdadero (TRUE). Esta es probablemente la alternativa más útil para seleccionar subconjuntos de vectores en R en razón a que, como veremos a continuación, permite el uso de expresiones lógicas. La extracción de elementos de un vector a partir del uso de vectores conformados por elementos lógicos, puede implementarse de manera directa -haciendo uso del vector lógico requerido- o a través de un vector lógico derivado de la evaluación de una operación lógica. Filosóficamente, la extracción de elmentos de un vector haciendo uso d evectores de tipo lógico, presentan la siguiente estructura. Nombre_vector[c(LOGICO)] En la estructura anterior, el Nombre_vector hace referencia al vector del cual deseamos extraer algunos elementos; el operador [ ], como se definió previamente, nos permite extraer elementos de un vector en R y, finalmente, el c(LOGICO) contiene un vector lógico en donde se definen las posiciones que contienen los elementos que serán extraidos. 3.1 Vectores lógicos - manera directa La extracción de elementos de un vector a través del uso de vectores lógicos generados de manera directa exige que el usuario construya de manera manual, el vector lógico en cuyo interior se define, a través de datos de tipo TRUE, las posiciones que se desean extraer. Por ejemplo, si deseamos extraer la primera y la última posición del vector Vect_1 &lt;- c(1:5) haciendo uso de un vector lógico construido de manera directa, debemos implementar en R la instrucción Vect_1[c(TRUE, FALSE, FALSE, FALSE, TRUE)]. A continuación, en el ejemplo 1, se presenta la implementación de esta instrucción en R; así mismo, en el ejemplo 2, se presentan otros subconjuntos de elementos de un vector en R haciendo uso de vectores conformados por datos de tipo lógico. Ejemplo. Extracción de elementos de un vector con vectores lógicos # Ejemplo 1. Extracción de elementos con vectores lógicos directos # Creación y evaluación del vector Vect_1 &lt;- c(1:5) Vect_1 ## [1] 1 2 3 4 5 # Extracción del primero y del último elemento Vect_1[c(TRUE, FALSE, FALSE, FALSE, TRUE)] ## [1] 1 5 # Ejemplo 2. Extracción de elementos con vectores lógicos directos # Creación y evaluación del vector Vect_2 &lt;- seq(0, 6, 2) Vect_2 ## [1] 0 2 4 6 # Extracción de los primeros dos elementos Vect_2[c(TRUE, TRUE, FALSE, FALSE)] ## [1] 0 2 # Extracción del último elemento Vect_2[c(FALSE, FALSE, FALSE, TRUE)] ## [1] 6 La extracción de elementos de un vector en R haciendo uso de vectores de tipo lógico construidos de manera manual, implica que el vector lógico debe tener la misma cantidad de elementos que el vector de donde se desean extraer los elementos de interés. En el caso de la presencia de un vector lógico de menor longitud, este recicla sus elementos con el fin de garantizarla igualdad de elementos entre los vectores involucrados en la selección20. Por ejemplo, si deseamos extraer los números impares contenidos en el vector Vect_2 &lt;- c(1:50) haciendo uso de un vector lógico construido de manera manual, resulta muy engorroso el proceso de construcción del vector lógico que nos garantice esta selección en razón a que este está compuesto por 50 elementos. En esta situación, resulta útil la construcción de un vector lógico de menor longitud y obligar al lenguaje a que aplique la regla de reciclaje al mismo para obtener el resultado deseado. A continuación, se presenta el desarrollo del ejemplo contenido en el párrafo anterior así como otros ejemplos en donde resulta útil la construcción de vectores lógicos de menor tamaño para extraer elementos de vectores conformados por una alta cantidad de elementos. Ejemplo. Extracción de elementos con vectores lógicos - regla de reciclaje # Aplicación regla de reciclaje para extracción de elementos con vectores lógicos # Creación y evaluación del vector Vect_2 &lt;- c(1:50) Vect_2 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 # Ejemplo 1. Extracción de los números impares Vect_2[c(TRUE, FALSE)] ## [1] 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 # Ejemplo 2. Extracción de los números pares Vect_2[c(FALSE, TRUE)] ## [1] 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 # Ejemplo 2. Extracción de los múltiplos de 5 Vect_2[c(FALSE, FALSE, FALSE, FALSE, TRUE)] ## [1] 5 10 15 20 25 30 35 40 45 50 3.2 Vectores lógicos - operaciones lógicas La extración de elementos de un vector haciendo uso de vectores lógicos directos o contruidos de manera manual, es una actividad poco frecuente a la hora de gestionar vectores en R. En este lenguaje, el uso de vectores lógicos para la extracción de elementos es ampliamente usado cuando estos se disponen o construyen a partir del resultado de una operación lógica en la que se involucran operadores relacionales (&lt;, &gt;, &lt;=, &gt;=, == y !=), operadores lógicos (&amp;, | y !) o una combinación de ambos. Por ejemplo, si deseamos extraer los números negativos del vector Vect_3 &lt;- c(-5, 10), bastaría implementar en R la instrucción Vect_3[Vect_3 &lt; 0]. En la instrucción anterior, la operación aritmética contenida dentro de los corchetes Vect_3 &lt; 0, arroja un vector lógico con valores TRUE para las posiciones (index) del vector Vect_3 en donde existen números negativos y FALSE en donde existen ceros o números positivos; paso seguido, el software procede a extraer los elementos de interés del vector en cuestión haciendo uso del vector lógico resultante de la operación lógica. A continuación, se presenta en R el resultado del ejercicio ilustrado en el párrafo anterior así como otros ejemplos en donde se hace uso de operaciones lógicas con operadores relacionales y lógicos para la extracción de los elementos contenidos dentro de un vector. Invitamos al lector a analizar y reflexionar sobre los pasos que implementa R al momento de extraer elementos de un vector a partir de operaciones lógicas y, en especial, a través de aquellas que combinan operadores relacionales y lógicos (ver ejemplos 4, 5 y 6). Ejemplo. Extracción de elementos con vectores lógicos derivados de operaciones lógicas # Extracción de elementos con vectores lógicos derivados de operaciones lógicas # Creación y evaluación del vector Vect_3 &lt;- c(-5:10) Vect_3 ## [1] -5 -4 -3 -2 -1 0 1 2 3 4 5 6 7 8 9 10 # Ejemplo 1. Extracción de los números negativos - operadores relacionales Vect_3[Vect_3 &lt; 0] ## [1] -5 -4 -3 -2 -1 # Ejemplo 2. Extracción de los números positivos - operadores relacionales Vect_3[Vect_3 &gt; 0] ## [1] 1 2 3 4 5 6 7 8 9 10 # Ejemplo 3. Extracción de los ceros - operadores relacionales Vect_3[Vect_3 == 0] ## [1] 0 # Ejemplo 4. Extracción de los números negativos o de los mayores o iguales a 5 # operadores relacionales y lógicos Vect_3[Vect_3 &lt; 0 | Vect_3 &gt;= 5] ## [1] -5 -4 -3 -2 -1 5 6 7 8 9 10 # Ejemplo 5. Extracción de los números en el intervalo [0, 5) # Alternativa 1 Vect_3[!(Vect_3 &lt; 0 | Vect_3 &gt;= 5)] ## [1] 0 1 2 3 4 # Ejemplo 6. Extracción de los números en el intervalo [0, 5) # Alternativa 2 # Guardar y evaluar resultados a partir de una variable Vect_4 &lt;- Vect_3[Vect_3 &lt; 5 &amp; Vect_3 &gt;= 0] Vect_4 ## [1] 0 1 2 3 4 2.6.1.6 Nombres de elementos en vectores Los vectores en R, además de ser construidos a partir del comando c(), están compuestos por elementos los cuales, como se presentó en la sección de tipos de vectores, definen la tipolología que los representa: lógicos, enteros, numéricos y cadena o caracter. Los vectores, además de las características antes ilustradas, pueden contener nombres que identifiquen a cada uno de sus elementos. Es decir, además de contar con un número indice que los identifica, estos pueden contener nombres asociados a dichos indíces. En la figura que se presenta a continuación, se ilustra la filosofía a la hora de asignar nombres a los elementos que conforman un vector. Filosofia nombre vectores En R, existen 2 formas de asignar nombres a vectores: al momento de crear vectores o cuando estos están creados. A continuación, se presentan en detalle estas dos formas de asignación de nombres. Asignación de nombres a vectores - al crear el vector La asignación de nombres a los elementos de un vector en el momento en el que estos son creados se da a través del operador =. Este operador, inermedia entre el nombre y el valor que acompaña a cada uno de los elementos de un vector. Por ejemplo, el vector c(a = 5, b = 6, c = 7) está conformado por tres elementos en donde el nombre que representa al elemento 1 es la a, el que representa el elemento 2 es la b y el que representa al elemento 3 es la c. A continuación, se presenta este y otros ejemplos de asignación directa de nombres a los elementos de vectores en R. Ejemplo. Asignación a nombres de elementos de vectores en R - al crear vectores # Ejemplo 1. Nombres de elementos en vectores c(a = 5, b = 6, c = 7) ## a b c ## 5 6 7 # Ejemplo 2. Nombres de elementos en vectores c(x = TRUE, y = FALSE, z = TRUE, w = TRUE) ## x y z w ## TRUE FALSE TRUE TRUE # Ejemplo 3. Nombres de elementos en vectores haciendo uso de variables Var_2 &lt;- c(Nombre1 = &#39;a&#39;, Nombre2 = &#39;b&#39;, Nombre3 = &#39;c&#39;) Var_2 ## Nombre1 Nombre2 Nombre3 ## &quot;a&quot; &quot;b&quot; &quot;c&quot; Asignación de nombres a vectores - cuando el vector está creado La asignación de nombres a elementos de vectores en R en su momento de creación, en la excepción y no la regla. Lo norma, en este lenguaje, es que la asignación de nombres se dé una vez estos se han creado. Para ello, debemos acudir a una combinación entre una función disponible en R conocida como names() y un vector de tipo caracter con los nombres que serán asignados a los elementos de un vector dado. A continuación, se presentan dos ejemplos con la asignación de nombres de manera indirecta en R; es decir, cuando el vector ya se encuentra creado. # Ejemplo 1. Nombres de elementos en vectores vector1 &lt;- c(1:5) Nombres1 &lt;- c(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;) names(vector1) &lt;- Nombres1 vector1 ## a b c d e ## 1 2 3 4 5 # Ejemplo 2. Nombres de elementos en vectores vector2 &lt;- seq(from = 1, to = 10, by = 1) Nombres2 &lt;- letters[c(1:10)] names(vector2) &lt;- Nombres2 vector2 ## a b c d e f g h i j ## 1 2 3 4 5 6 7 8 9 10 En el primero de los ejemplos, en su primera línea de código, se crea un vector numérico c(1:5) y su contenido es almacenado en una variable llamada vector1. En la segunda línea de código, se crea un vector de tipo caracter c('a', 'b', 'c', 'd', 'e') con los nombres que tendrán los elementos del vector previamente creado y su contenido se guarda dentro de la variable Nombres1. En la tercera línea de código del ejemplo 1, se hace uso de la función names() para indicarle que a los elementos del vector1 se le asignen los nombres contenidos en el vector caracter Nombres1. Por último, en la línea cuatro del código, verificamos que el vector 1 cuenta con los nombres asignados a cada uno de sus elementos. Invitamos al lector a analizar y estudiar lo que hace R en el proceso de creación del nombre de los elementos del vector que hace parte del ejemplo 2. Finalmente, si deseamos conocer en R los nombres de los elementos de un vector, podemos hacerlo a través de la misma función empleada para su asignación; es decir, names(). Por ejemplo, si aplicamos la instrucción names(vector1) al vector resultantes del desarrollo del ejemplo 1, el lenguaje nos retorna los nombres de los elementos que hacen parte de este vector. Indexación de vectores a partir de nombres de elementos En la sección de Indexación/subconjuntos de vectores, se definió que en R existen 6 posibilidades para extraer elementos de un vector. De estas, se anunció que en este documento se ilustrarían 4 de estas posibilidades y se avanzó en tres de ellas: extracción de elementos a partir de vectores con enteros positivos, vectores con enteros negativos y vectores lógicos. A continuación, se presenta la cuarta y última alternativa para la selección de elementos de un vector la cual, como se verá, implica el uso de vectores de tipo cadena o caracter conformados por los nombres de los elementos de un vector. La extracción de elementos a partir de vectores conformados por vectores de tipo cadena o caracter retorna los elementos disponibles en las posiciones de un vector según sus nombres. Por ejemplo, si deseamos extraer la primera y la última posición del vector Var_1 &lt;- c(a = 1, b = 2, c = 3, d = 4, e = 5) a partir de los nombres de estos elementos, basta con implementar en R la línea de comando Var_1[c('a', 'e')]. En esta línea de comando, el operador (corchete) [] indica que estamos interesados en extraer un subconjunto de elementos contenidos en el vector Var_1 y el vector c('a', 'e') indica que los elementos que deseamos extraer son aquellos cuyos nombres son a y e; es decir, los ubicados en la primera y la última posición del vector Var_1. A continuación, en el ejemplo, se presenta el desarrollo de la anterior instrucción y de otros subconjuntos de vectores en R extraídos a partir de vectores de tipo caracter con los nombres de sus elementos. # Ejemplo 1. Extracción del primero y del último elemento Var_1 &lt;- c(a = 1, b = 2, c = 3, d = 4, e = 5) Var_1[c(&#39;a&#39;, &#39;e&#39;)] ## a e ## 1 5 # Ejemplo 2. Extracción de los elementos 2 y 3 Var_1[c(&#39;b&#39;, &#39;c&#39;)] ## b c ## 2 3 # Ejemplo 3. Extracción de los últimos dos elementos y guardar el resultado en una variable Var_2 &lt;- Var_1[c(&#39;d&#39;, &#39;e&#39;)] Var_2 ## d e ## 4 5 # Ejemplo 4. Extracción del primer elemento 5 veces Var_1[rep(&#39;a&#39;, 5)] ## a a a a a ## 1 1 1 1 1 2.6.2 Matrices La segunda estructura de datos empleda por R son las matrices. Estas, como se ilustra en la siguiente imagen, son estructuras de tipo bidimensional conformadas por filas (rows) y columnas (columns) las cuales, al igual que los vectores, están conformadas por datos de una misma tipología (lógicos, enteros, numéricos o doble y caracter o cadena). Representación gráfica de una matriz A continuación, se presenta la regla general para la construcción de matrices21 en R. Regla: Construcción de matrices en R En R, las matrices se construyen haciendo uso de la función matrix(). Los tipos de datos que conforman una matrix deben ser en su totalidad de la misma tipología. La función matrix() está compuesta por parámetros o argumentos entre los cuales se destacan: un conjunto de datos data que generalmente es un vectorc(), la cantidad de filas de la matriz nrow, la cantidad de columnas de la matriz ncol, un dato lógico con la forma como se conformarán los elementos dentro de la matriz byrow (por filas o columnas) y, finalmente, el argumento dimnames conformado por una lista22 en donde se define, si se considera necesario y a través de vectores de tipo caracter, los nombres de las filas y de las columnas de la matriz de datos. A Continuación, se presenta un ejemplo de creación de una matriz en R. matrix(data = c(1:9), nrow= 3, ncol = 3, byrow = TRUE, dimnames = list(c(&#39;F1&#39;, &#39;F2&#39;, &#39;F3&#39;), c(&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;))) En el ejemplo anterior, el argumento data = c(1:9) nos dice que vamos a conformar una matriz con los números del 1 al 9 contenidos dentro del vector c(1:9). Los argumentos nrow = 3 y ncol = 3 nos dicen que vamos a conformar una matriz de tres filas y tres columnas (3x3). El argumento byrow = TRUE nos dice que los números del 1 al 9 serán ingresados a la matriz a través de filas -primero la fila 1, luego la 2 y por último, la fila 3-. Finalmente, el argumento dimnamescontiene una lista con dos vectores que conforman los nombres de las filas c('F1', 'F2', 'F3') así como los nombres de las columnas c('C1', 'C2', 'C3') de la matriz del presente ejemplo. Al evaluar esta matriz en R, obtendremos el siguiente resultado. ## C1 C2 C3 ## F1 1 2 3 ## F2 4 5 6 ## F3 7 8 9 Si, por ejemplo, en la matriz anterior, estamos interesados en cambiar el ingreso de los elementos que conforman la matriz de datos (de filas a columnas), basta con cambiar el argumento byrow de TRUE a FALSE. A continuación, se presenta la matriz de datos resultante al cambiar este argumento. matrix(data = c(1:9), nrow= 3, ncol = 3, byrow = FALSE, dimnames = list(c(&#39;F1&#39;, &#39;F2&#39;, &#39;F3&#39;), c(&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;))) ## C1 C2 C3 ## F1 1 4 7 ## F2 2 5 8 ## F3 3 6 9 En R, a menos que se diga lo contrario, el ingreso de los datos a una matriz se da por columnas (por defecto byrow = FALSE); así mismo, este puede omitir tanto el nombre de las filas o columnas de la matriz como el número de filas, siempre y cuando, se diga el número de columnas o viceversa. A continuación, se presenta el mismo ejemplo de la matriz anterior en donde se evalúa(imprime) únicamente dos de sus argumentos. matrix(data = c(1:9), nrow= 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 En la matriz anterior, el lenguaje entiende que estamos interesados en obtener una matriz con tres filas conformada por los números del 1 al 9. Por defecto, R entiende/asume que byrow = FALSE; es decir, los datos se ingresarán por columnas y que no estamos interesados en definir los nombres de las filas y las columnas de dicha matriz. En este caso, le hemos indicado a R que conforme una matriz de tres filas y que cree tantas columnas como sea necesario para que en dicha matriz existan los elementos con los números del 1 al 9; desde luego, 3 es la cantidad de columnas requeridas23 para conformar una matriz de tres filas con los elementos del 1 al 9. A continuación, se presentan 10 ejemplos de diversas matrices creadas en R. Invitamos al lector a explorar y analizar la forma como el lenguaje evalúa/procesa cada una de estas matrices. Ejemplo. Creación de matrices en R # Ejemplo 1 - Por defecto - columnas matrix(c(1:5)) ## [,1] ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 ## [5,] 5 # Ejemplo 2 - Indicando filas y columnas matrix(1L:12L, nrow = 4, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 3 - Por filas matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 ## [4,] 10 11 12 # Ejemplo 4 - Sin definir columnas matrix(1:12, nrow = 4) ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Ejemplo 5 - Sin definir filas matrix(1:12, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 # Ejemplo 6 - Con secuencias y creación de variables M &lt;- matrix(seq(from = 2, to = 8, by = 2), nrow = 2, ncol = 2) M ## [,1] [,2] ## [1,] 2 6 ## [2,] 4 8 # Ejemplo 7 - Con repeticiones matrix(rep(1,4), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] 1 1 ## [2,] 1 1 # Ejemplo 8 - Con elementos lógicos matrix(c(TRUE, FALSE, FALSE, TRUE), nrow = 2, ncol = 2) ## [,1] [,2] ## [1,] TRUE FALSE ## [2,] FALSE TRUE # Ejemplo 9 - Con elementos tipo caractér - cadena matrix(c(&#39;Lunes&#39;, &#39;Martes&#39;, &#39;Miércoles&#39;, &#39;Jueves&#39;, &#39;Viernes&#39;, &#39;Sábado&#39;), nrow = 3, ncol = 2) ## [,1] [,2] ## [1,] &quot;Lunes&quot; &quot;Jueves&quot; ## [2,] &quot;Martes&quot; &quot;Viernes&quot; ## [3,] &quot;Miércoles&quot; &quot;Sábado&quot; # Ejemplo 10 - Reciclando elementos matrix(1:7, ncol = 3) ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 1 ## [3,] 3 6 2 2.6.2.1 Indexación/subconjuntos de matrices En R, al igual que en el caso de los vectores, una de las actividades de mayor uso en la gestión de matrices es la selección de elementos o subconjuntos de elementos de estas. La selección de elementos de una matriz en R se soporta en la siguiente regla. Regla. Subconjuntos de matrices en R Para extraer elementos de una matriz en R se hace uso de corchetes [ , ]. La coma, entre los corchetes, nos permite separar, haciendo uso de vectores, los elementos o subconjuntos de elementos de interés según su ubicación tanto en filas como en columnas. Si disponemos, por ejemplo, de una matriz M conformada por la matriz matrix(c(1:16), nrow = 4), cuyo resultado se presenta a continuación. ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 ## [3,] 3 7 11 15 ## [4,] 4 8 12 16 Y si, por ejemplo, estamos interesados en extraer el elemento de la matriz M ubicado en la fila 2 y la columna 3; es decir, el número 10, basta con implementar en R la línea de código M[2, 3]24. De igual manera, si deseamos obtener la totalidad de elementos que conforman la fila 4 de la matriz M, basta con implementar la línea de comando M[4, ]25. Finalmente, si estamos interesados en obtener los elementos -subconjunto o submatriz- ubicados entre las filas 3 y 4 y las columnas 1 y 2 de la matriz M, se deberá implementar la siguiente línea de comando en R M[c(3,4), c(1,2)]. A continuación, se presenta el desarrollo en R de los anteriores subconjuntos de elementos de la matriz M. # Construcción y visualización de la matriz M M &lt;- matrix(c(1:16), nrow = 4) M ## [,1] [,2] [,3] [,4] ## [1,] 1 5 9 13 ## [2,] 2 6 10 14 ## [3,] 3 7 11 15 ## [4,] 4 8 12 16 # Selección del elemento ubicado en la fila 2 y la columna 3 - opción 1 M[2, 3] ## [1] 10 # Selección del elemento ubicado en la fila 2 y la columna 3 - opción 2 M[c(2), c(3)] ## [1] 10 # Selección de la totalidad de elementos ubicados en la fila 4. M[4, ] ## [1] 4 8 12 16 # Selección de la totalidad de elementos ubicados en la columna 4 M[ , 4] ## [1] 13 14 15 16 # selección de los elementos ubicados en las filas 3 y 4 y en las columnas 1 y 2 (submatriz). M[c(3,4), c(1,2)] ## [,1] [,2] ## [1,] 3 7 ## [2,] 4 8 De manera general, la selección de elementos o subconjuntos de elementos de una matriz en R, al igual que en caso de vectores, se puede realizar a través del uso de 6 tipos de opciones de las cuales se presentan, en este documento, ejemplos para 4 de ellas: vectores con enteros positivos, vectores con enteros negativos, vectores lógicos y vectores de tipo caracter26. A continuación, se presentan algunos ejemplos de extracción de elementos de una matriz en R haciendo uso de los cuatro tipos de vectores previamente anunciados. Ejemplo. Extracción de elementos de matrices en R según tipos de vectores # Creación y evaluación/visualización de una matriz en R N &lt;- matrix(data = c(1:9), nrow= 3, ncol = 3, byrow = FALSE, dimnames = list(c(&#39;F1&#39;, &#39;F2&#39;, &#39;F3&#39;), c(&#39;C1&#39;, &#39;C2&#39;, &#39;C3&#39;))) N ## C1 C2 C3 ## F1 1 4 7 ## F2 2 5 8 ## F3 3 6 9 # Ejemplo 1. Extracción de elementos haciendo uso de enteros positivos # selección de filas 1 y 2 y columnas 2 y 3 # Esta línea de código es equivalente a: N[c(1L, 2L), c(2L, 3L)] N[c(1, 2), c(2, 3)] ## C2 C3 ## F1 4 7 ## F2 5 8 # Ejemplo 2. Extracción de elementos haciendo uso de enteros negativos # selección de elementos ubicados en una posición diferente de la fila 1 y la columna 2 # Esta línea de código es equivalente a: N[c(-1), c(-2)] o N[-c(1), -c(2)] N[-1, -2] ## C1 C3 ## F2 2 8 ## F3 3 9 # Ejemplo 3. Extracción de elementos haciendo uso de elementos lógicos # selección de elementos ubicados en las filas 1 y 3 y las columnas 1 y 3 # Esta línea de código es equivalente a: N[c(TRUE, FALSE), c(TRUE, FALSE)], por qué? N[c(TRUE, FALSE, TRUE), c(TRUE, FALSE, TRUE)] ## C1 C3 ## F1 1 7 ## F3 3 9 # Ejemplo 4. Extracción de elementos haciendo uso de elementos de tipo caracter # selección de elementos ubicados en las filas 1 y 2 y las columnas 2 y 3 N[c(&#39;F1&#39;, &#39;F2&#39;), c(&#39;C2&#39;, &#39;C3&#39;)] ## C2 C3 ## F1 4 7 ## F2 5 8 2.6.2.2 Funciones útiles para la gestión de matrices Hasta ahora, en este documento, poco se ha hablado sobre las funciones y su importancia en este lenguaje de programación. En sentido estricto, R es un lenguaje funcional; es decir, altamente soportado en el uso de funciones. Las funciones en R, como veremos más adelante, se encuentran contenidas principalmente dentro de paquetes o librerías27. Los paquetes o librerías que contienen funciones hacen parte de dos grandes subconjuntos de librerías: las que ofrece el lenguaje por defecto al momento de su instalación y aquellas construidas por la comunidad para diversos propósitos asociados a la gestión y el análisis de datos. Por el momento, iniciaremos con el abordaje de algunas funciones de interés que hacen parte del conjunto de librerías instaladas por defecto en R; es decir, que no requieren ser invocadas/instaladas previamente para ser usadas. A medida que se avance en el desarrollo de este documento, se irá incursionando con mayor frecuencia en el acceso, entendimiento y uso de las funciones en R. Para el caso de la gestión de matrices en R, a continuación, se presentan y se describe el uso de diez28 funciones útiles para la gestión de matrices y que hacen parte de las librerías incuídas por defecto en este lenguaje29. class(): Verifica si el tipo de objeto o estructura de datos es una matriz. nrow(): Retorna el número de filas de una matriz. ncol(): Retorna el número de columnas de una matriz. dim(): Retorna las dimensiones de una matriz; es decir, cuántas filas y cuántas columnas tiene. rowSums(): Retorna un vector con la suma de los elementos que conforman las filas de una matriz. colSums(): Retorna un vector con la suma de los elementos que conforman las columnas de una matriz. rbind(): Permite adicionar filas a una matriz. cbind(): Permite adicionar columnas a una matriz. rownames(): Permite ingresar los nombres de las filas de una matriz. colnames(): Permite ingresar los nombres de las columnas de una matriz. A continuación, a través de una matriz de ejemplo, se presenta el uso de las anteriores funciones en el contexto de la gestión de matrices en R. Se invita al lector a explorar y analizar la forma como operan en R cada una de estas funciones. Ejemplo. Uso de funciones para la gestión de matrices en R # Crea una matriz en R, almacenar su resultado en una variable M y visualizar su contenido. M &lt;- matrix(data = c(1:6), ncol = 2, byrow = TRUE) M ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## [3,] 5 6 # Determinar la clase de la estructura de datos M - función class() class(M) ## [1] &quot;matrix&quot; # Determinar el número de filas de la matriz M - función nrow() nrow(M) ## [1] 3 # Determinar el número de columnas de la matriz M - función ncol() ncol(M) ## [1] 2 # Determinar las dimensiones de la matriz M - función dim() dim(M) ## [1] 3 2 # Calcular un vector con las suma de las filas de la matriz M - función rowSums() rowSums(M) ## [1] 3 7 11 # Calcular un vector con las suma de las columnas de la matriz M - función colSums() colSums(M) ## [1] 9 12 # Adicionar una fila a la Matriz M - función rbind() # ¿Qué tiene de especial la función rbind() en comparación con las anteriores funciones? M &lt;- rbind(M, c(7, 8)) M ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 4 ## [3,] 5 6 ## [4,] 7 8 # Adicionar una columna a la matriz M - función cbind() # ¿Por qué se adiciona un vector con cuatro elementos y no uno con tres? M &lt;- cbind(M, c(1, 2, 3, 4)) M ## [,1] [,2] [,3] ## [1,] 1 2 1 ## [2,] 3 4 2 ## [3,] 5 6 3 ## [4,] 7 8 4 # Adicionar los nombres de las filas de la matriz M - función rownames() # Qué tiene de especial esta función en comparación con las anteriores? rownames(M) &lt;- c(&#39;Fil_1&#39;, &#39;Fil_2&#39;, &#39;Fil_3&#39;, &#39;Fil_4&#39;) M ## [,1] [,2] [,3] ## Fil_1 1 2 1 ## Fil_2 3 4 2 ## Fil_3 5 6 3 ## Fil_4 7 8 4 # Adicionar los nombres de las columnas de la matriz M - función colnames() # La variable con la que iniciamos tenía 2 columnas # ¿Por qué en esta línea de código la matriz M tiene 3 columnas? colnames(M) &lt;- c(&#39;Col_1&#39;, &#39;Col_2&#39;, &#39;Col_3&#39;) M ## Col_1 Col_2 Col_3 ## Fil_1 1 2 1 ## Fil_2 3 4 2 ## Fil_3 5 6 3 ## Fil_4 7 8 4 2.6.3 Data.frames Al final de esta sección, se presenta una “estructura” especial de datos la cual,en sentido estricto, no presenta las mismas características que las demás estructuras presentadas en este documento↩︎ Un número escalar hace referencia a una estructura conformada por un único número. Por ejemplo, 3, 4 -5 o 7, son ejemplos de escalares en otros lenguajes de programación↩︎ En R, la presencia de vectores en cuyo interior se presentan elementos de diversas tipologías se debe, principalmente, a la presencia de probables errores en la creación/inserción de estos que, por ejemplo, a una característica recurrente y propia del análisis de datos.↩︎ hasta tanto el usuario no disponga de experiencia y conocimiento sobre ciertas funciones de R, se recomienta que al invocar estas siempre se coloque el nombre de cada uno de los parámetros utilizados↩︎ Invitamos al lector a imaginar y entender lo que el lenguaje está haciendo al momento de evaluar las operaciones entre vectores existentes en este ejemplo↩︎ La longitud de un vector en R puede ser explorada/conocida a través de la función length(). Por ejemplo, al implementar la siguiente instrucción en R length(c(1:5)), el resultado será 5 que es equivalente a la cantidad de elementos que contienen el vector dado↩︎ Al implementar operaciones lógicas entre vectores que combinan operadores relacionales y lógicos, aplica la regla de precedencia o priorización para este tipo de operadores y que fue presentada en la sección 2.5. Primero se evaluan las operaciones con vectores que implican operadores relacionales y luego las que implican operadores lógicos↩︎ El tamaño de un vector hace referencia a la cantidad de elementos que este contiene. Por ejemplo, el tamaño o longitud del vector c(1, 3, 4, 5) es igual a 4 (cantidad de elementos)↩︎ En este documento, dado su alcance, nos concentraremos en las primeras cuatro posibilidades; es decir, no serán tenidas en cuenta las opciones ninguno (nothing) y cero (zero), de poca utilidad o uso en el análisis de datos↩︎ La cuarta opción, basada en vectores de tipo caracter, será presentada en la sección siguiente↩︎ Esta característica resulta útil al momento de extraer elementos de un vector con una gran cantidad de elementos siempre y cuando los elementos a ser seleccionados presenten una sucesión/ciclo útil en la práctica↩︎ Esta no es la única forma que ofrece el lenguaje para la construcción de matrices. No obstante, es la forma convencional que ofrece R para la construcción de este tipo de estructuras↩︎ Más adelante se presentarán de manera formal lo que es una lista en R. Por el momento, aceptaremos que estas estructura de datos -las listas- nos permiten alojar más de un vector de datos↩︎ En el caso de que la cantidad de columnas requeridas multiplicada por la cantidad de filas, sea mayor a la cantidad de elementos disponibles, R, al igual que en el caso de vectores, recicla los elementos del vector de datos disponible hasta completar la matriz requerida↩︎ Este resultado es equivalente a haber implementado la línea de código M[c(2), c(3)] en razón a que en este lenguaje, como se mencionó en la segunda regla del capítulo de vectores, no existen escalares sino vectores de longitud 1↩︎ Si lo que se hubiese requerido es la selección de los elementos de la columna 4, la línea de código requerida es M[ , 4]↩︎ La selección de elementos de una matriz haciendo uso de vectores de tipo caracter, requiere que las filas y las columnas de la matriz hayan sido nombradas (tengan nombres)↩︎ En R, como se presentará más adelante, es posible y común, construir funciones por parte de los usuarios para propósitos particulares.↩︎ En R, existen cientos de funciones para la gestión de matrices las cuales exigen del usuario, además de una correcta gestión de las mismas, conocer cuáles de ellas resultan útiles para los propósitos deseados.↩︎ Una función en R puede ser útil para más de una estructura de datos. Por ejemplo, la función class() que se usa para determinar el tipo de estructura que contiene un conjunto de datos puede usarse en vectores, matrices o cualquier otro tipo de objeto en R↩︎ "],
["3-Ejercicios.html", "Capítulo 3 Ejercicios", " Capítulo 3 Ejercicios En esta sección, se presenta un conjunto de ejercicios en R los cuales se iran presentando/asignando de manera periódica a lo largo del desarrollo del presente curso. Estos, están orientados a afianzar los conocimientos adquiridos en el proceso de aprendizaje y a fomentar su discusión en algunas de las sesiones virtuales del curso. "],
["3-1-trabajo-1.html", "3.1 Trabajo 1", " 3.1 Trabajo 1 ¿Qué regla aplica R para evaluar/desarrollar la operación aritmética compuesta (6/2*(2+1 + 2^3) + 24/(2*3 + 0^3) + 3)/8? Explicar, paso a paso y mediante varias líneas de comando, ¿cómo este lenguaje genera el resultado de la anterior operación? Escriba el número pi haciendo uso de la constante integrada pi, guarde su valor dentro de una variable llamada longitud circunferencia vs radio e imprima su resultado. Nota: el nombre de la variable debe respetar los espacios existentes entre las diferentes palabras. Escribra un dato de tipo lógico, almacene/guarde su contenido en una variable llamada Var%_1 e imprima su resultado. ¿Qué pasó al imprimir el resultado en R?, ¿Cómo arreglaría el problema generado para que imprima el resultado de manera correcta? Crear dos vectores en R con los números de 5 en 5: uno iniciando en 5 y terminando en 100 y el otro iniciando en 100 y terminando en 5. Es decir, c(5, 10, 15, 20, ... 100) y c(100, 95, 90, 85, ... 5). Cree en R, a partir de las funciones vistas para generar vectores de manera rápida (:, seq() o rep()), el siguiente vector c(“a”, “b”, “b”, “c”, “c”, “c”, “d”, “d”, “d”, “d”). Cree la variable var_1 y asigne a esta los elementos del vector c(1:10); luego cree la variable var_2 y asigne los elementos contenidos en el vector c(1, 0). Una vez se hayan creado los anteriores dos vectores, cree una nueva variable Rta y almacene allí la división entre los vectores var_1 y var_2. ¿Qué regla aplica R para realizar esta operación dado que los vectores son de diferente longitud? ¿Qué le llama la atención de los tipos de datos que genera esta división? ¿Qué explicación podría dar a los datos “raros” que esta operación genera? Cree la variable x y asigne a esta los elementos del vector c(10, 15, 20 , '30'); luego cree la variable y y asigne los elementos contenidos en el vector c(2, 5, '2', 10). Una vez se hayan creado los anteriores dos vectores, cree una nueva variable z y almacene allí la multiplicación entre los vectores x e y. ¿Por qué se genera un error al realizar la multiplicación entre los vectores x e y?, ¿qué regla está aplicando R a los elementos que conforman los vectores x e y antes de realizar la multiplicación? ¿Cómo solucionaria el problema generado por R para que se pueda implementar la multiplicación deseada? Nota: Copie el contenido de los vectores x e y directamente desde el ejercicio; es decir, no los ingrese manualmente a través del teclado. Cree en R un vector con los números del 1 al 100 y almacene el resultado en una variable llamada m. Haciendo uso de operadores relacionales, genere un vector lógico en donde TRUE contenga las posiciones de los elementos menores o iguales a 10 (&lt;= 10) que hacen parte del vector m. Cree la variable Números y asigne a esta los elementos del vector c('uno', 'tres', 'uno ', 'cuatro', ' uno', 'cinco', 'uno'). Haciendo uso de operadores lógicos de tipo relacional, cree una variable llamada Resultado y almacene allí un vector lógico con las posiciones en donde la variable Números es igual a la palabra uno, imprima los resultados contenidos en la variable Resultado. ¿Por qué algunos elementos del vector contenido en la variable Números, que tienen la palabra uno, no aparecen como TRUE en el vector lógico contenido en la variable Resultado? Realice los ajustes que considere pertinentes al vector Números para que la totalidad de los elementos que contienen la palabra uno aparezcan como TRUE en el vector lógico contenido en la variable Resultado. Nota: Copie el contenido del vector Números directamente desde el ejercicio; es decir, no los ingrese manualmente a través del teclado. Cree la variable var_1 y asigne a esta los elementos del vector seq(-5, 5, 1); luego cree la variable var_2 y asigne los elementos contenidos en el vector c(-5, 1, 2, -5, 3, 1, 0, -4, -5, 3, 1, -5). Implemente en R una expresión lógica que contenga las posiciones en donde los elementos de la variable var_1 son menores o iguales a cero y los elementos del vector var_2 son iguales a -5, 2 o -4. Nota: Investigue en la web el operador %in% en R y úselo si lo considera útil para desarrollar este ejercicio Cree la variable Serie y asigne a esta los números del 1 al 99 de dos en 2 (1, 3, 5, 7, ... , 99). Seleccione, haciendo uso del operador [ ] (corchetes), los elementos múltiplos de 5 contenidos en el vector Serie y almacene el resultado en una variable llamada Multiplo5. Imprima los resultados contenidos en la variable Multiplo5. ¿Por qué la variable Multiplo5 no genera un conflicto en R a pesar de que esta contiene un número en su nombre? Cree la variable Var en R y almacene en ella las primeras 5 letras del abecedario romano a partir de la constante integrada LETTERS. Cree, a partir de los elementos almacenados en la variable Var, una variable llamada Rep_Var con cada uno de los elementos contenidos en la variable Var de manera duplicada; es decir, \"A\" \"A\" \"B\" \"B\" \"C\" \"C\" \"D\" \"D\" \"E\" \"E\". Imprima los resultados de la variable Rep_Var. Nota: Los elementos de la variable Var no pueden ser ingresados desde el teclado; estos deben ser extraidos (un subconjunto) a partir del uso de la constante integrada LETTERS. Cree la variable Nueva y asigne a esta los elementos del vector c(11, 20, 15, 10); cree la variable Nombres y asigne a esta los elementos del vector c('xyz', 'c%2', 'mno', 'for'). Asigne a los elementos de la variable Nueva los nombres contenidos en la variable Nombres e imprima los resultados. Seleccione los elementos del vector contenido en la variable Nueva cuyos nombres son xyz y for. ¿Por qué cree que R no genera un error en los nombres de los elementos contenidos en el vector Nombres a pesar de que dos de ellos usan caracteres especiales del lenguaje R o palabras reservadas (c%2 y for)? "]
]
